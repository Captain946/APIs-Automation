{
	"info": {
		"_postman_id": "4b65d676-b9f6-4f35-bc70-f27bb52f10e0",
		"name": "Delivery I-card",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Create I-card",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "63b85d8d-62ac-46f5-834a-40ef373a7bd7",
						"exec": [
							"const url = pm.environment.get(\"BaseUrl\");\r",
							"const auth = pm.collectionVariables.get(\"Vendor_auth\");\r",
							"\r",
							"if(auth == undefined || auth == null){\r",
							"const postRequest = {\r",
							"    url: ''+url+'/api/v1/auth/user/login',\r",
							"    method: 'POST',\r",
							"    header: {\r",
							"        'Content-Type': 'application/json',\r",
							"    },\r",
							"    body: {\r",
							"    mode: 'raw',\r",
							"    raw: JSON.stringify({\r",
							"        \"mobile\" : \"9898982454\",\r",
							"        \"password\": \"vendor@123\",\r",
							"        })\r",
							"    }\r",
							"};\r",
							"pm.sendRequest(postRequest, (error, response) => {\r",
							"    var x_auth = response.headers.find(h => h.key == \"X-AUTH\");\r",
							"    var token = x_auth.value;\r",
							"    pm.collectionVariables.set(\"Vendor_auth\",token);\r",
							"});\r",
							"}\r",
							"\r",
							"\r",
							"var fssaiNumber = Math.round(Math.random()*43 + 21324567876543);\r",
							"pm.collectionVariables.set(\"fssai\",fssaiNumber);\r",
							"var age = Math.round(Math.random()*10+23);\r",
							"pm.collectionVariables.set(\"age\",age);\r",
							"var mobileNumber = Math.round(Math.random()*27 + 7896543214);\r",
							"pm.collectionVariables.set(\"MobileNumber\", mobileNumber);\r",
							"var AdharNo = Math.round(Math.random()*19 + 423412125678)\r",
							"pm.collectionVariables.set(\"aadhaarNumber\",AdharNo);\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "5160f57a-8902-45f7-a549-d536ff201285",
						"exec": [
							"const code = pm.response.code;\r",
							"if (code == 401) {\r",
							"    pm.collectionVariables.set(\"Vendor_auth\", null);\r",
							"    postman.setNextRequest(\"Create I-card\");\r",
							"} else if (code == 201) {\r",
							"    postman.setNextRequest(\"Delivery I-card list\")\r",
							"\r",
							"    pm.test(\"Status code is 201\", () => {\r",
							"        pm.response.to.have.status(201);\r",
							"        postman.setNextRequest(\"Delivery I-card list\");\r",
							"    });\r",
							"    pm.test(\"Response time is less than 500ms\", () => {\r",
							"        pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"    });\r",
							"    pm.test(\"Status code name has string Created\", () => {\r",
							"        pm.response.to.have.status(\"Created\");\r",
							"    });\r",
							"    pm.test(\"Content-Type is present\", () => {\r",
							"        pm.response.to.have.header(\"Content-Type\");\r",
							"    });\r",
							"    pm.test(\"Content-Type header has value application/json\", () => {\r",
							"        var content = pm.response.headers.get(\"Content-Type\");\r",
							"        pm.expect(content).equal(\"application/json\");\r",
							"    });\r",
							"    pm.test(\"Status is success\", () => {\r",
							"        pm.expect(pm.response.json().status).equal(\"success\")\r",
							"    });\r",
							"\r",
							"    var jsonData = pm.response.json().result;\r",
							"\r",
							"    pm.test(\"id field has number value \", () => {\r",
							"        var id = jsonData.id;\r",
							"        pm.expect(id).to.be.a(\"number\").and.to.match(/[0-9]$/);\r",
							"        pm.collectionVariables.set(\"Id\", id);\r",
							"    });\r",
							"    pm.collectionVariables\r",
							"    pm.test(\"deliveryAgentName field has string value \", () => {\r",
							"        var deliveryAgentName = jsonData.deliveryAgentName;\r",
							"        pm.expect(deliveryAgentName).to.be.a(\"string\");\r",
							"        pm.collectionVariables.set(\"deliveryAgentName\", deliveryAgentName);\r",
							"    });\r",
							"    pm.test(\"mobileNumber field has string value and length is 10\", () => {\r",
							"        var mobileNumber = jsonData.mobileNumber;\r",
							"        pm.expect(typeof mobileNumber).to.be.oneOf([\"string\", \"number\"]);\r",
							"        pm.expect(mobileNumber.length).to.equal(10);\r",
							"        pm.collectionVariables.set(\"mobileNumber\", mobileNumber)\r",
							"    });\r",
							"    pm.test(\"age field has numeric value and below 100\", () => {\r",
							"        var age = jsonData.age;\r",
							"        pm.expect(age).to.be.a(\"number\").and.below(100);\r",
							"        pm.collectionVariables.set(\"age\", age);\r",
							"    });\r",
							"    pm.test(\"vendor field has object value \", () => {\r",
							"        var vendor = jsonData.vendor;\r",
							"        pm.expect(vendor).to.be.a(\"object\");\r",
							"    });\r",
							"    pm.test(\"stationName field has string value\", () => {\r",
							"        var stationName = jsonData.stationName;\r",
							"        pm.expect(stationName).to.be.a(\"string\").and.to.match(/[A-Za-z]$/);\r",
							"        pm.collectionVariables.set(\"stationName\", stationName);\r",
							"    });\r",
							"    pm.test(\"stationCode field has string value\", () => {\r",
							"        var stationCode = jsonData.stationCode;\r",
							"        pm.expect(stationCode).to.be.a(\"string\").and.to.match(/[A-Z]$/);\r",
							"        pm.collectionVariables.set(\"stationCode\", stationCode);\r",
							"    });\r",
							"    pm.test(\"outletName field has string value\", () => {\r",
							"        var outletName = jsonData.outletName;\r",
							"        pm.expect(outletName).to.be.a(\"string\").and.to.match(/[A-Za-z]$/);\r",
							"        pm.collectionVariables.set(\"outletName\", outletName);\r",
							"    });\r",
							"    pm.test(\"outletMobileNo field has string value and length is 10\", () => {\r",
							"        var outletMobileNo = jsonData.outletMobileNo;\r",
							"        pm.expect(typeof outletMobileNo).to.be.oneOf([\"string\", \"number\"]);\r",
							"        pm.expect(outletMobileNo.length).to.equal(10);\r",
							"        pm.collectionVariables.set(\"outletMobileNo\", outletMobileNo);\r",
							"    });\r",
							"    pm.test(\"outletEmail field has string value \", () => {\r",
							"        var outletEmail = jsonData.outletEmail;\r",
							"        pm.expect(outletEmail).to.be.a(\"string\");\r",
							"        pm.collectionVariables.set(\"outletEmail\", outletEmail);\r",
							"    });\r",
							"    pm.test(\"fssaiNumber field has string value and length is 14\", () => {\r",
							"        var fssaiNumber = jsonData.fssaiNumber;\r",
							"        pm.expect(typeof fssaiNumber).to.be.oneOf([\"string\", \"number\"]);\r",
							"        pm.expect(fssaiNumber.length).to.equal(14);\r",
							"        pm.collectionVariables.set(\"fssaiNumber\", fssaiNumber);\r",
							"    });\r",
							"    pm.test(\"aadhaarNumber field has string value and length is 14\", () => {\r",
							"        var aadhaarNumber = jsonData.aadhaarNumber;\r",
							"        pm.expect(typeof aadhaarNumber).to.be.oneOf([\"string\", \"number\"]);\r",
							"        pm.expect(aadhaarNumber.length).to.equal(12);\r",
							"        pm.collectionVariables.set(\"aadhaarNumber\", aadhaarNumber);\r",
							"    });\r",
							"    pm.test(\"zoneStatus field has value as pending\", () => {\r",
							"        var zoneStatus = jsonData.zoneStatus;\r",
							"        pm.expect(zoneStatus).to.be.a(\"string\").and.equal(\"PENDING\");\r",
							"    });\r",
							"    pm.test(\"zoneStatusDate field has null value\", () => {\r",
							"        var zoneStatusDate = jsonData.zoneStatusDate;\r",
							"        pm.expect(zoneStatusDate).to.be.null;\r",
							"    });\r",
							"    pm.test(\"zoneStatusUpdatedBy field has null value\", () => {\r",
							"        var zoneStatusUpdatedBy = jsonData.zoneStatusUpdatedBy;\r",
							"        pm.expect(zoneStatusUpdatedBy).to.be.null;\r",
							"    });\r",
							"    pm.test(\"ggmStatus field has value as pending\", () => {\r",
							"        var ggmStatus = jsonData.ggmStatus;\r",
							"        pm.expect(ggmStatus).to.be.a(\"string\").and.to.equal(\"PENDING\");\r",
							"    });\r",
							"    pm.test(\"ggmStatusDate field has null value\", () => {\r",
							"        var ggmStatusDate = jsonData.ggmStatusDate;\r",
							"        pm.expect(ggmStatusDate).to.be.null;\r",
							"    });\r",
							"    pm.test(\"ggmStatusUpdatedBy field has null value\", () => {\r",
							"        var ggmStatusUpdatedBy = jsonData.ggmStatusUpdatedBy;\r",
							"        pm.expect(ggmStatusUpdatedBy).to.be.null;\r",
							"    });\r",
							"    pm.test(\"createdAt field has null value\", () => {\r",
							"        var createdAt = jsonData.createdAt;\r",
							"        pm.expect(createdAt).to.be.a(\"string\");\r",
							"    });\r",
							"    pm.test(\"createdBy field has string value\", () => {\r",
							"        var createdBy = jsonData.createdBy;\r",
							"        pm.expect(createdBy).to.be.a(\"string\");\r",
							"    });\r",
							"    pm.test(\"updatedAt field has null value\", () => {\r",
							"        var updatedAt = jsonData.updatedAt;\r",
							"        pm.expect(updatedAt).to.be.null;\r",
							"    });\r",
							"    pm.test(\"updatedBy field has null value\", () => {\r",
							"        var updatedBy = jsonData.updatedBy;\r",
							"        pm.expect(updatedBy).to.be.null;\r",
							"    });\r",
							"    pm.test(\"remarks field has null value\", () => {\r",
							"        var remarks = jsonData.remarks;\r",
							"        pm.expect(remarks).to.be.null;\r",
							"    });\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"_postman_id": "4b96a66f-3c2b-44b7-b7c6-3a0d27f409b1",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-auth",
						"value": "{{Vendor_auth}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"stationCode\": \"NDLS\",\r\n    \"deliveryAgentName\": \"{{$randomFullName}}\",\r\n    \"mobileNumber\": \"{{MobileNumber}}\",\r\n    \"age\": {{age}},\r\n    \"stationName\": \"NEW DELHI\",\r\n    \"fssaiNumber\": \"21343212345678\",\r\n    \"aadhaarNumber\": \"237656436788\",\r\n    \"outletName\": \"Testing Vendor 1\",\r\n    \"outletMobileNo\": \"9571894947\",\r\n    \"outletEmail\": \"loharmanish@gmail.com\",\r\n    \"idFile\": \"idFile.pdf\",\r\n    \"fileUpload\": true,\r\n    \"medicalCertificateFile\": \"medicalCertificateFile.pdf\",\r\n    \"verificationCertificateFile\": \"varificationCertificateFile.jpg\",\r\n    \"photographFile\": \"PhotoGraphFile.jpg\",\r\n    \"appointmentCertificateFile\": \"appointmentCertificateFile.png\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{BaseUrl}}/api/v1/icard"
			},
			"response": []
		},
		{
			"name": "Delivery I-card list",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b2d34d94-17f8-4675-ac77-b6b70d66573b",
						"exec": [
							"const url = pm.environment.get(\"BaseUrl\");\r",
							"const auth = pm.collectionVariables.get(\"Vendor_auth\");\r",
							"\r",
							"if(auth == undefined || auth == null){\r",
							"const postRequest = {\r",
							"    url: ''+url+'/api/v1/auth/user/login',\r",
							"    method: 'POST',\r",
							"    header: {\r",
							"        'Content-Type': 'application/json',\r",
							"    },\r",
							"    body: {\r",
							"    mode: 'raw',\r",
							"    raw: JSON.stringify({\r",
							"        \"mobile\" : \"9898982454\",\r",
							"        \"password\": \"vendor@123\",\r",
							"        })\r",
							"    }\r",
							"};\r",
							"pm.sendRequest(postRequest, (error, response) => {\r",
							"    var x_auth = response.headers.find(h => h.key == \"X-AUTH\");\r",
							"    var token = x_auth.value;\r",
							"    pm.collectionVariables.set(\"Vendor_auth\",token);\r",
							"});\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "19eafe6a-4891-4329-9705-03b9d41242a5",
						"exec": [
							"const code = pm.response.code;\r",
							"if (code == 200) {\r",
							"    postman.setNextRequest(\"Zone I-card list\");\r",
							"\r",
							"    pm.test(\"Status code is 200\", function() {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"    pm.test(\"Response time is less than 500ms\", function() {\r",
							"        pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"    });\r",
							"    pm.test(\"Status code name has string OK\", function() {\r",
							"        pm.response.to.have.status(\"OK\");\r",
							"    });\r",
							"    pm.test(\"Content-Type is present\", function() {\r",
							"        pm.response.to.have.header(\"Content-Type\");\r",
							"    });\r",
							"    pm.test(\"Content-Type header has value application/json\", function() {\r",
							"        var content = pm.response.headers.get(\"Content-Type\");\r",
							"        pm.expect(content).equal(\"application/json\");\r",
							"    });\r",
							"    pm.test(\"Status is success\", () => {\r",
							"        pm.expect(pm.response.json().status).equal(\"success\")\r",
							"    });\r",
							"\r",
							"    var jsonData = pm.response.json().result;\r",
							"\r",
							"    pm.test(\"All the details are showing as filled at the time of I-Card creation\", function() {\r",
							"        var IcardId = pm.collectionVariables.get(\"Id\");\r",
							"        var positionOfId = jsonData.deliveryICards.map(\r",
							"            function(find) {\r",
							"                return find.id;\r",
							"            }\r",
							"        ).indexOf(IcardId);\r",
							"        if (positionOfId >= 0) {\r",
							"            var iCardDetails = jsonData.deliveryICards[positionOfId];\r",
							"            pm.expect(iCardDetails.id).equal(IcardId);\r",
							"            var deliveryAgentName = pm.collectionVariables.get(\"deliveryAgentName\")\r",
							"            pm.expect(iCardDetails.deliveryAgentName, \"agentname is not match\").to.equal(deliveryAgentName);\r",
							"            var mobileNumber = pm.collectionVariables.get(\"mobileNumber\")\r",
							"            pm.expect(iCardDetails.mobileNumber).to.equal(mobileNumber);\r",
							"            var age = pm.collectionVariables.get(\"age\")\r",
							"            pm.expect(iCardDetails.age).to.equal(age);\r",
							"            var stationName = pm.collectionVariables.get(\"stationName\");\r",
							"            pm.expect(iCardDetails.stationName).to.equal(stationName);\r",
							"            var stationCode = pm.collectionVariables.get(\"stationCode\")\r",
							"            pm.expect(iCardDetails.stationCode).to.equal(stationCode);\r",
							"            var outletName = pm.collectionVariables.get(\"outletName\");\r",
							"            pm.expect(iCardDetails.outletName).to.equal(outletName);\r",
							"            var outletMobileNo = pm.collectionVariables.get(\"outletMobileNo\");\r",
							"            pm.expect(iCardDetails.outletMobileNo).to.equal(outletMobileNo);\r",
							"            var outletEmail = pm.collectionVariables.get(\"outletEmail\");\r",
							"            pm.expect(iCardDetails.outletEmail).to.equal(outletEmail);\r",
							"            var fssaiNumber = pm.collectionVariables.get(\"fssaiNumber\");\r",
							"            pm.expect(iCardDetails.fssaiNumber).to.equal(fssaiNumber);\r",
							"            var aadhaarNumber = pm.collectionVariables.get(\"aadhaarNumber\");\r",
							"            pm.expect(iCardDetails.aadhaarNumber).to.equal(aadhaarNumber);\r",
							"            postman.setNextRequest(\"Zone I-card list\");\r",
							"        }\r",
							"    })\r",
							"\r",
							"    pm.test(\"total delivery card count has number value\", function() {\r",
							"        var total = jsonData.total;\r",
							"        pm.expect(total).to.be.a(\"number\").and.match(/[0-9]$/);\r",
							"    })\r",
							"    var deliveryCard = jsonData.deliveryICards;\r",
							"\r",
							"    pm.test(\"deliveryICards has array field\", function() {\r",
							"        pm.expect(deliveryCard).to.be.an(\"array\");\r",
							"    })\r",
							"\r",
							"    for (let i = 0; i < deliveryCard.length; i++) {\r",
							"        var IcardDetails = deliveryCard[i];\r",
							"        pm.test(\"id field has number value \", function() {\r",
							"            var id = IcardDetails.id;\r",
							"            pm.expect(id).to.be.a(\"number\").and.to.match(/[0-9]$/);\r",
							"        });\r",
							"        pm.test(\"deliveryAgentName field has string value \", function() {\r",
							"            var deliveryAgentName = IcardDetails.deliveryAgentName;\r",
							"            pm.expect(deliveryAgentName).to.be.a(\"string\");\r",
							"        });\r",
							"        pm.test(\"mobileNumber field has string value and length is 10\", function() {\r",
							"            var mobileNumber = IcardDetails.mobileNumber;\r",
							"            pm.expect(typeof mobileNumber).to.be.oneOf([\"string\", \"number\"]);\r",
							"            pm.expect(mobileNumber).length.below(11).and.greaterThan(9);\r",
							"        });\r",
							"        pm.test(\"age field has numeric value and below 100\", function() {\r",
							"            var age = IcardDetails.age;\r",
							"            pm.expect(age).to.be.a(\"number\").and.below(100);\r",
							"        });\r",
							"        pm.test(\"vendor field has object value \", function() {\r",
							"            var vendor = IcardDetails.vendor;\r",
							"            pm.expect(vendor).to.be.a(\"object\");\r",
							"        });\r",
							"        pm.test(\"stationName field has string value\", function() {\r",
							"            var stationName = IcardDetails.stationName;\r",
							"            pm.expect(stationName).to.be.a(\"string\").and.to.match(/[A-Za-z]$/);\r",
							"        });\r",
							"        pm.test(\"stationCode field has string value\", function() {\r",
							"            var stationCode = IcardDetails.stationCode;\r",
							"            pm.expect(stationCode).to.be.a(\"string\").and.to.match(/[A-Z]$/);\r",
							"        });\r",
							"        pm.test(\"outletName field has string value\", function() {\r",
							"            var outletName = IcardDetails.outletName;\r",
							"            pm.expect(outletName).to.be.a(\"string\").and.to.match(/[A-Za-z]$/);\r",
							"        });\r",
							"        pm.test(\"outletMobileNo field has string value and length is 10\", function() {\r",
							"            var outletMobileNo = IcardDetails.outletMobileNo;\r",
							"            pm.expect(typeof outletMobileNo).to.be.oneOf([\"string\", \"number\"]);\r",
							"            pm.expect(outletMobileNo.length).to.equal(10);\r",
							"        });\r",
							"        pm.test(\"outletEmail field has string value \", function() {\r",
							"            var outletEmail = IcardDetails.outletEmail;\r",
							"            pm.expect(outletEmail).to.be.a(\"string\");\r",
							"        });\r",
							"        pm.test(\"fssaiNumber field has string value and length is 14\", function() {\r",
							"            var fssaiNumber = IcardDetails.fssaiNumber;\r",
							"            pm.expect(typeof fssaiNumber).to.be.oneOf([\"string\", \"number\"]);\r",
							"            pm.expect(fssaiNumber.length).to.equal(14);\r",
							"        });\r",
							"        pm.test(\"aadhaarNumber field has string value and length is 14\", function() {\r",
							"            var aadhaarNumber = IcardDetails.aadhaarNumber;\r",
							"            pm.expect(typeof aadhaarNumber).to.be.oneOf([\"string\", \"number\"]);\r",
							"            pm.expect(aadhaarNumber.length).to.equal(12);\r",
							"        });\r",
							"        pm.test(\"zoneStatus field has value as pending or Approved or Rejected value\", function() {\r",
							"            var zoneStatus = IcardDetails.zoneStatus;\r",
							"            pm.expect(zoneStatus).to.be.a(\"string\").and.oneOf([\"PENDING\", \"APPROVED\", \"REJECTED\"]);\r",
							"        });\r",
							"        pm.test(\"zoneStatusDate field has string or null value\", function() {\r",
							"            var zoneStatusDate = IcardDetails.zoneStatusDate;\r",
							"            pm.expect(typeof zoneStatusDate).to.be.oneOf([\"null\", \"string\", \"object\"]);\r",
							"        });\r",
							"        pm.test(\"zoneStatusUpdatedBy field has null or string value\", function() {\r",
							"            var zoneStatusUpdatedBy = IcardDetails.zoneStatusUpdatedBy;\r",
							"            pm.expect(typeof zoneStatusUpdatedBy).to.be.oneOf([\"string\", \"null\", \"object\"]);\r",
							"        });\r",
							"        pm.test(\"ggmStatus field has value as pending or Approved or Rejected value\", function() {\r",
							"            var ggmStatus = IcardDetails.ggmStatus;\r",
							"            pm.expect(ggmStatus).to.be.a(\"string\").and.to.oneOf([\"PENDING\", \"APPROVED\", \"REJECTED\"]);\r",
							"        });\r",
							"        pm.test(\"ggmStatusDate field has null value\", function() {\r",
							"            var ggmStatusDate = IcardDetails.ggmStatusDate;\r",
							"            pm.expect(typeof ggmStatusDate).to.be.oneOf([\"string\", \"null\", \"object\"]);\r",
							"        });\r",
							"        pm.test(\"ggmStatusUpdatedBy field has null value\", function() {\r",
							"            var ggmStatusUpdatedBy = IcardDetails.ggmStatusUpdatedBy;\r",
							"            pm.expect(typeof ggmStatusUpdatedBy).to.be.oneOf([\"string\", \"null\", \"object\"]);\r",
							"        });\r",
							"        pm.test(\"createdAt field has null value\", function() {\r",
							"            var createdAt = IcardDetails.createdAt;\r",
							"            pm.expect(createdAt).to.be.a(\"string\");\r",
							"        });\r",
							"        pm.test(\"createdBy field has string value\", function() {\r",
							"            var createdBy = IcardDetails.createdBy;\r",
							"            pm.expect(createdBy).to.be.a(\"string\");\r",
							"        });\r",
							"        pm.test(\"updatedAt field has null value\", function() {\r",
							"            var updatedAt = IcardDetails.updatedAt;\r",
							"            pm.expect(typeof updatedAt).to.be.oneOf([\"null\", \"string\", \"object\"]);\r",
							"        });\r",
							"        pm.test(\"updatedBy field has null value\", function() {\r",
							"            var updatedBy = IcardDetails.updatedBy;\r",
							"            pm.expect(typeof updatedBy).to.be.oneOf([\"string\", \"null\", \"object\"]);\r",
							"        });\r",
							"        pm.test(\"remarks field has null value\", function() {\r",
							"            var remarks = IcardDetails.remarks;\r",
							"            pm.expect(typeof remarks).to.be.oneOf([\"null\", \"string\", \"object\"]);\r",
							"        });\r",
							"    }\r",
							"} else if (code == 401) {\r",
							"    postman.setNextRequest(\"Create I-card\")\r",
							"} else {\r",
							"    postman.setNextRequest(null)\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"_postman_id": "0a2abcfd-040f-4cc0-955f-8a959360992c",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-auth",
						"value": "{{Vendor_auth}}",
						"type": "text"
					}
				],
				"url": "{{BaseUrl}}/api/v1/icard"
			},
			"response": []
		},
		{
			"name": "Zone I-card list",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "866d4900-2a93-42db-ba7d-66b983b1797f",
						"exec": [
							"const url = pm.environment.get(\"BaseUrl\")\r",
							"const auth = pm.collectionVariables.get(\"Zone_auth\");\r",
							"\r",
							"if(auth == undefined || auth == null){\r",
							"    const postRequest = {\r",
							"    url: ''+url+'/api/v1/auth/user/login',\r",
							"    method: 'POST',\r",
							"    header: {\r",
							"        'Content-Type': 'application/json',\r",
							"    },\r",
							"    body: {\r",
							"    mode: 'raw',\r",
							"    raw: JSON.stringify({\r",
							"        \"mobile\" : \"9898989898\",\r",
							"        \"password\": \"zone123\",\r",
							"        })\r",
							"    }\r",
							"};\r",
							"pm.sendRequest(postRequest, (error, response) => {\r",
							"    var x_auth = response.headers.find(h => h.key == \"X-AUTH\");\r",
							"    var token = x_auth.value;\r",
							"    pm.collectionVariables.set(\"Zone_auth\",token);\r",
							"});\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "ec084b41-8e71-4431-bdac-1c94f04f1a52",
						"exec": [
							"const code = pm.response.code;\r",
							"if (code == 401) {\r",
							"    pm.collectionVariables.set(\"Zone_auth\", null);\r",
							"    postman.setNextRequest(\"Zone I-card list\");\r",
							"} else if (code == 200) {\r",
							"    postman.setNextRequest(\"Zone Approved\");\r",
							"\r",
							"    pm.test(\"Status code is 200\", function() {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"    pm.test(\"Response time is less than 500ms\", function() {\r",
							"        pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"    });\r",
							"    pm.test(\"Status code name has string OK\", function() {\r",
							"        pm.response.to.have.status(\"OK\");\r",
							"    });\r",
							"    pm.test(\"Content-Type is present\", function() {\r",
							"        pm.response.to.have.header(\"Content-Type\");\r",
							"    });\r",
							"    pm.test(\"Content-Type header has value application/json\", function() {\r",
							"        var content = pm.response.headers.get(\"Content-Type\");\r",
							"        pm.expect(content).equal(\"application/json\");\r",
							"    });\r",
							"    pm.test(\"Status is success\", () => {\r",
							"        pm.expect(pm.response.json().status).equal(\"success\")\r",
							"    });\r",
							"\r",
							"    var jsonData = pm.response.json().result;\r",
							"\r",
							"    pm.test(\"All the details are showing as filled at the time of I-Card creation\", function() {\r",
							"        var IcardId = pm.collectionVariables.get(\"Id\");\r",
							"        var positionOfId = jsonData.deliveryICards.map(\r",
							"            function(find) {\r",
							"                return find.id;\r",
							"            }\r",
							"        ).indexOf(IcardId);\r",
							"        if (positionOfId >= 0) {\r",
							"            var iCardDetails = jsonData.deliveryICards[positionOfId];\r",
							"            pm.test(\"I-card Id are founded in the list and showing correct\", function() {\r",
							"                pm.expect(iCardDetails.id).equal(IcardId);\r",
							"                postman.setNextRequest(\"Zone Approved\");\r",
							"            });\r",
							"            pm.test(\"deliveryAgentName are showing correct\", function() {\r",
							"                var deliveryAgentName = pm.collectionVariables.get(\"deliveryAgentName\")\r",
							"                pm.expect(iCardDetails.deliveryAgentName, \"agentname is not match\").to.equal(deliveryAgentName);\r",
							"            });\r",
							"            pm.test(\"mobileNumber are showing correct\", function() {\r",
							"                var mobileNumber = pm.collectionVariables.get(\"mobileNumber\")\r",
							"                pm.expect(iCardDetails.mobileNumber).to.equal(mobileNumber);\r",
							"            });\r",
							"            pm.test(\"age are showing correct\", function() {\r",
							"                var age = pm.collectionVariables.get(\"age\")\r",
							"                pm.expect(iCardDetails.age).to.equal(age);\r",
							"            });\r",
							"            pm.test(\"stationName are showing correct\", function() {\r",
							"                var stationName = pm.collectionVariables.get(\"stationName\");\r",
							"                pm.expect(iCardDetails.stationName).to.equal(stationName);\r",
							"            })\r",
							"            pm.test(\"stationCode are showing correct\", function() {\r",
							"                var stationCode = pm.collectionVariables.get(\"stationCode\")\r",
							"                pm.expect(iCardDetails.stationCode).to.equal(stationCode);\r",
							"            });\r",
							"            pm.test(\"outletName are showing correct\", function() {\r",
							"                var outletName = pm.collectionVariables.get(\"outletName\");\r",
							"                pm.expect(iCardDetails.outletName).to.equal(outletName);\r",
							"            });\r",
							"            pm.test(\"outletEmail are showing correct\", function() {\r",
							"                var outletMobileNo = pm.collectionVariables.get(\"outletMobileNo\");\r",
							"                pm.expect(iCardDetails.outletMobileNo).to.equal(outletMobileNo);\r",
							"            });\r",
							"            pm.test(\"outletEmail are showing correct\", function() {\r",
							"                var outletEmail = pm.collectionVariables.get(\"outletEmail\");\r",
							"                pm.expect(iCardDetails.outletEmail).to.equal(outletEmail);\r",
							"            });\r",
							"            pm.test(\"fssaiNumber are showing correct\", function() {\r",
							"                var fssaiNumber = pm.collectionVariables.get(\"fssaiNumber\");\r",
							"                pm.expect(iCardDetails.fssaiNumber).to.equal(fssaiNumber);\r",
							"            });\r",
							"            pm.test(\"aadhaarNumber are showing correct\", function() {\r",
							"                var aadhaarNumber = pm.collectionVariables.get(\"aadhaarNumber\");\r",
							"                pm.expect(iCardDetails.aadhaarNumber).to.equal(aadhaarNumber)\r",
							"            });\r",
							"            pm.test(\"Zone status are showing as pending\", function() {\r",
							"                pm.expect(iCardDetails.zoneStatus).to.equal(\"PENDING\");\r",
							"            });\r",
							"            pm.test(\"ggm status are showing as pending\", function() {\r",
							"                pm.expect(iCardDetails.ggmStatus).to.equal(\"PENDING\");\r",
							"            })\r",
							"\r",
							"        }\r",
							"    });\r",
							"\r",
							"} else {\r",
							"    postman.setNextRequest(null)\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"_postman_id": "6751e77a-64a1-4ec4-a592-b0e7bbdfa43e",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-auth",
						"value": "{{Zone_auth}}",
						"type": "text"
					}
				],
				"url": "{{BaseUrl}}/api/v1/icard"
			},
			"response": []
		},
		{
			"name": "Zone Approved",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ee1d4df2-8e05-4e02-87bd-f7ed8bf0a994",
						"exec": [
							"const code = pm.response.code;\r",
							"\r",
							"if (code == 200) {\r",
							"\r",
							"    pm.test(\"Status code is 200\", function() {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"    pm.test(\"Response time is less than 500ms\", function() {\r",
							"        pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"    });\r",
							"    pm.test(\"Status code name has string OK\", function() {\r",
							"        pm.response.to.have.status(\"OK\");\r",
							"    });\r",
							"    pm.test(\"Content-Type is present\", function() {\r",
							"        pm.response.to.have.header(\"Content-Type\");\r",
							"    });\r",
							"    pm.test(\"Content-Type header has value application/json\", function() {\r",
							"        var content = pm.response.headers.get(\"Content-Type\");\r",
							"        pm.expect(content).equal(\"application/json\");\r",
							"    });\r",
							"    pm.test(\"Status is success\", () => {\r",
							"        pm.expect(pm.response.json().status).equal(\"success\")\r",
							"    });\r",
							"\r",
							"    var iCardDetails = pm.response.json().result;\r",
							"\r",
							"    pm.test(\"Id are showing correct\", function() {\r",
							"        var IcardId = pm.collectionVariables.get(\"Id\");\r",
							"        postman.setNextRequest(\"GGM I-card list\");\r",
							"        pm.expect(iCardDetails.id).equal(IcardId);\r",
							"    });\r",
							"    pm.test(\"deliveryAgentName are showing correct\", function() {\r",
							"        var deliveryAgentName = pm.collectionVariables.get(\"deliveryAgentName\")\r",
							"        pm.expect(iCardDetails.deliveryAgentName).to.equal(deliveryAgentName);\r",
							"    });\r",
							"    pm.test(\"mobileNumber are showing correct\", function() {\r",
							"        var mobileNumber = pm.collectionVariables.get(\"mobileNumber\")\r",
							"        pm.expect(iCardDetails.mobileNumber).to.equal(mobileNumber);\r",
							"    });\r",
							"    pm.test(\"age are showing correct\", function() {\r",
							"        var age = pm.collectionVariables.get(\"age\")\r",
							"        pm.expect(iCardDetails.age).to.equal(age);\r",
							"    });\r",
							"    pm.test(\"stationName are showing correct\", function() {\r",
							"        var stationName = pm.collectionVariables.get(\"stationName\");\r",
							"        pm.expect(iCardDetails.stationName).to.equal(stationName);\r",
							"    })\r",
							"    pm.test(\"stationCode are showing correct\", function() {\r",
							"        var stationCode = pm.collectionVariables.get(\"stationCode\")\r",
							"        pm.expect(iCardDetails.stationCode).to.equal(stationCode);\r",
							"    });\r",
							"    pm.test(\"outletName are showing correct\", function() {\r",
							"        var outletName = pm.collectionVariables.get(\"outletName\");\r",
							"        pm.expect(iCardDetails.outletName).to.equal(outletName);\r",
							"    });\r",
							"    pm.test(\"outletEmail are showing correct\", function() {\r",
							"        var outletMobileNo = pm.collectionVariables.get(\"outletMobileNo\");\r",
							"        pm.expect(iCardDetails.outletMobileNo).to.equal(outletMobileNo);\r",
							"    });\r",
							"    pm.test(\"outletEmail are showing correct\", function() {\r",
							"        var outletEmail = pm.collectionVariables.get(\"outletEmail\");\r",
							"        pm.expect(iCardDetails.outletEmail).to.equal(outletEmail);\r",
							"    });\r",
							"    pm.test(\"fssaiNumber are showing correct\", function() {\r",
							"        var fssaiNumber = pm.collectionVariables.get(\"fssaiNumber\");\r",
							"        pm.expect(iCardDetails.fssaiNumber).to.equal(fssaiNumber);\r",
							"    });\r",
							"    pm.test(\"aadhaarNumber are showing correct\", function() {\r",
							"        var aadhaarNumber = pm.collectionVariables.get(\"aadhaarNumber\");\r",
							"        pm.expect(iCardDetails.aadhaarNumber).to.equal(aadhaarNumber)\r",
							"    });\r",
							"    pm.test(\"Zone status are showing as pending\", function() {\r",
							"        pm.expect(iCardDetails.zoneStatus).to.equal(\"APPROVED\");\r",
							"    });\r",
							"    pm.test(\"ggm status are showing as pending\", function() {\r",
							"        pm.expect(iCardDetails.ggmStatus).to.equal(\"PENDING\");\r",
							"    })\r",
							"} else if (code == 401) {\r",
							"    postman.setNextRequest(\"Zone I-card list\");\r",
							"} else {\r",
							"    postman.setNextRequest(null);\r",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "20b6761e-77fe-4026-b866-0330385c8822",
						"exec": [
							"const url = pm.environment.get(\"BaseUrl\")\r",
							"const auth = pm.collectionVariables.get(\"Zone_auth\");\r",
							"\r",
							"if(auth == undefined || auth == null){\r",
							"    const postRequest = {\r",
							"    url: ''+url+'/api/v1/auth/user/login',\r",
							"    method: 'POST',\r",
							"    header: {\r",
							"        'Content-Type': 'application/json',\r",
							"    },\r",
							"    body: {\r",
							"    mode: 'raw',\r",
							"    raw: JSON.stringify({\r",
							"        \"mobile\" : \"9898989898\",\r",
							"        \"password\": \"zone123\",\r",
							"        })\r",
							"    }\r",
							"};\r",
							"pm.sendRequest(postRequest, (error, response) => {\r",
							"    var x_auth = response.headers.find(h => h.key == \"X-AUTH\");\r",
							"    var token = x_auth.value;\r",
							"    pm.collectionVariables.set(\"Zone_auth\",token);\r",
							"});\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"_postman_id": "cc1326bf-2204-4f9d-bf36-d9ba4e57dbb1",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-auth",
						"value": "{{Zone_auth}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"status\": \"APPROVED\",\r\n    \"remarks\": \"All the details are showing correct and it is approved by the Automation Testing\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{BaseUrl}}/api/v1/icard/{{Id}}/zoneStatus"
			},
			"response": []
		},
		{
			"name": "GGM I-card list",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "866d4900-2a93-42db-ba7d-66b983b1797f",
						"exec": [
							"const url = pm.environment.get(\"BaseUrl\");\r",
							"const auth = pm.collectionVariables.get(\"GGM_auth\");\r",
							"\r",
							"if(auth == undefined || auth == null){\r",
							"    const postRequest = {\r",
							"    url: ''+url+'/api/v1/auth/user/login',\r",
							"    method: 'POST',\r",
							"    header: {\r",
							"        'Content-Type': 'application/json',\r",
							"    },\r",
							"    body: {\r",
							"    mode: 'raw',\r",
							"    raw: JSON.stringify({\r",
							"        \"mobile\" : \"1234512345\",\r",
							"        \"password\": \"admin123\",\r",
							"        })\r",
							"    }\r",
							"};\r",
							"pm.sendRequest(postRequest, (error, response) => {\r",
							"    var x_auth = response.headers.find(h => h.key == \"X-AUTH\");\r",
							"    var token = x_auth.value;\r",
							"    pm.collectionVariables.set(\"GGM_auth\",token);\r",
							"});\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "38dd9f65-1717-4779-b259-00f1706d078c",
						"exec": [
							"const code = pm.response.code;\r",
							"if (code == 401) {\r",
							"    pm.collectionVariables.set(\"GGM_auth\", null);\r",
							"    postman.setNextRequest(\"GGM I-card list\");\r",
							"} else if (code == 200) {\r",
							"    postman.setNextRequest(\"GGM Approved\");\r",
							"\r",
							"    pm.test(\"Status code is 200\", function() {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"    pm.test(\"Response time is less than 500ms\", function() {\r",
							"        pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"    });\r",
							"    pm.test(\"Status code name has string OK\", function() {\r",
							"        pm.response.to.have.status(\"OK\");\r",
							"    });\r",
							"    pm.test(\"Content-Type is present\", function() {\r",
							"        pm.response.to.have.header(\"Content-Type\");\r",
							"    });\r",
							"    pm.test(\"Content-Type header has value application/json\", function() {\r",
							"        var content = pm.response.headers.get(\"Content-Type\");\r",
							"        pm.expect(content).equal(\"application/json\");\r",
							"    });\r",
							"    pm.test(\"Status is success\", () => {\r",
							"        pm.expect(pm.response.json().status).equal(\"success\")\r",
							"    });\r",
							"\r",
							"    var jsonData = pm.response.json().result;\r",
							"\r",
							"    pm.test(\"All the details are showing as filled at the time of I-Card creation\", function() {\r",
							"        var IcardId = pm.collectionVariables.get(\"Id\");\r",
							"        var positionOfId = jsonData.deliveryICards.map(\r",
							"            function(find) {\r",
							"                return find.id;\r",
							"            }\r",
							"        ).indexOf(IcardId);\r",
							"        if (positionOfId >= 0) {\r",
							"            var iCardDetails = jsonData.deliveryICards[positionOfId];\r",
							"            pm.test(\"Id are showing correct\", function() {\r",
							"                pm.expect(iCardDetails.id).equal(IcardId);\r",
							"            });\r",
							"            pm.test(\"deliveryAgentName are showing correct\", function() {\r",
							"                var deliveryAgentName = pm.collectionVariables.get(\"deliveryAgentName\")\r",
							"                pm.expect(iCardDetails.deliveryAgentName, \"agentname is not match\").to.equal(deliveryAgentName);\r",
							"            });\r",
							"            pm.test(\"mobileNumber are showing correct\", function() {\r",
							"                var mobileNumber = pm.collectionVariables.get(\"mobileNumber\")\r",
							"                pm.expect(iCardDetails.mobileNumber).to.equal(mobileNumber);\r",
							"            });\r",
							"            pm.test(\"age are showing correct\", function() {\r",
							"                var age = pm.collectionVariables.get(\"age\")\r",
							"                pm.expect(iCardDetails.age).to.equal(age);\r",
							"            });\r",
							"            pm.test(\"stationName are showing correct\", function() {\r",
							"                var stationName = pm.collectionVariables.get(\"stationName\");\r",
							"                pm.expect(iCardDetails.stationName).to.equal(stationName);\r",
							"            })\r",
							"            pm.test(\"stationCode are showing correct\", function() {\r",
							"                var stationCode = pm.collectionVariables.get(\"stationCode\")\r",
							"                pm.expect(iCardDetails.stationCode).to.equal(stationCode);\r",
							"            });\r",
							"            pm.test(\"outletName are showing correct\", function() {\r",
							"                var outletName = pm.collectionVariables.get(\"outletName\");\r",
							"                pm.expect(iCardDetails.outletName).to.equal(outletName);\r",
							"            });\r",
							"            pm.test(\"outletEmail are showing correct\", function() {\r",
							"                var outletMobileNo = pm.collectionVariables.get(\"outletMobileNo\");\r",
							"                pm.expect(iCardDetails.outletMobileNo).to.equal(outletMobileNo);\r",
							"            });\r",
							"            pm.test(\"outletEmail are showing correct\", function() {\r",
							"                var outletEmail = pm.collectionVariables.get(\"outletEmail\");\r",
							"                pm.expect(iCardDetails.outletEmail).to.equal(outletEmail);\r",
							"            });\r",
							"            pm.test(\"fssaiNumber are showing correct\", function() {\r",
							"                var fssaiNumber = pm.collectionVariables.get(\"fssaiNumber\");\r",
							"                pm.expect(iCardDetails.fssaiNumber).to.equal(fssaiNumber);\r",
							"            });\r",
							"            pm.test(\"aadhaarNumber are showing correct\", function() {\r",
							"                var aadhaarNumber = pm.collectionVariables.get(\"aadhaarNumber\");\r",
							"                pm.expect(iCardDetails.aadhaarNumber).to.equal(aadhaarNumber)\r",
							"            });\r",
							"            pm.test(\"Zone status are showing as pending\", function() {\r",
							"                pm.expect(iCardDetails.zoneStatus).to.equal(\"APPROVED\");\r",
							"                postman.setNextRequest(\"GGM Approved\");\r",
							"            });\r",
							"            pm.test(\"ggm status are showing as pending\", function() {\r",
							"                pm.expect(iCardDetails.ggmStatus).to.equal(\"PENDING\");\r",
							"            })\r",
							"        }\r",
							"    });\r",
							"\r",
							"} else {\r",
							"    postman.setNextRequest(null)\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"_postman_id": "1742882d-26c5-4cb9-b57e-47add2b917c7",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-auth",
						"value": "{{GGM_auth}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{BaseUrl}}/api/v1/icard",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"icard"
					],
					"query": [
						{
							"key": "page",
							"value": "1",
							"disabled": true
						},
						{
							"key": "size",
							"value": "100000",
							"disabled": true
						},
						{
							"key": "sort",
							"value": "-id",
							"disabled": true
						},
						{
							"key": "zoneStatus",
							"value": "PENDING",
							"disabled": true
						},
						{
							"key": "ggmStatus",
							"value": "PENDING",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GGM Approved",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "88ce63c3-79da-42c8-972b-87f45840a464",
						"exec": [
							"const url = pm.environment.get(\"BaseUrl\");\r",
							"const auth = pm.collectionVariables.get(\"GGM_auth\");\r",
							"\r",
							"if(auth == undefined || auth == null){\r",
							"    const postRequest = {\r",
							"    url: ''+url+'/api/v1/auth/user/login',\r",
							"    method: 'POST',\r",
							"    header: {\r",
							"        'Content-Type': 'application/json',\r",
							"    },\r",
							"    body: {\r",
							"    mode: 'raw',\r",
							"    raw: JSON.stringify({\r",
							"        \"mobile\" : \"1234512345\",\r",
							"        \"password\": \"admin123\",\r",
							"        })\r",
							"    }\r",
							"};\r",
							"pm.sendRequest(postRequest, (error, response) => {\r",
							"    var x_auth = response.headers.find(h => h.key == \"X-AUTH\");\r",
							"    var token = x_auth.value;\r",
							"    pm.collectionVariables.set(\"GGM_auth\",token);\r",
							"});\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "4c0b4c43-f3cb-4912-b18a-7a080318c468",
						"exec": [
							"const code = pm.response.code;\r",
							"\r",
							"if (code == 200) {\r",
							"    postman.setNextRequest(\"Vendor Delivery I-card list\")\r",
							"    \r",
							"    pm.test(\"Status code is 200\", function() {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"    pm.test(\"Response time is less than 500ms\", function() {\r",
							"        pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"    });\r",
							"    pm.test(\"Status code name has string OK\", function() {\r",
							"        pm.response.to.have.status(\"OK\");\r",
							"    });\r",
							"    pm.test(\"Content-Type is present\", function() {\r",
							"        pm.response.to.have.header(\"Content-Type\");\r",
							"    });\r",
							"    pm.test(\"Content-Type header has value application/json\", function() {\r",
							"        var content = pm.response.headers.get(\"Content-Type\");\r",
							"        pm.expect(content).equal(\"application/json\");\r",
							"    });\r",
							"    pm.test(\"Status is success\", () => {\r",
							"        pm.expect(pm.response.json().status).equal(\"success\")\r",
							"    });\r",
							"\r",
							"    var iCardDetails = pm.response.json().result;\r",
							"\r",
							"    pm.test(\"Id are showing correct\", function() {\r",
							"        var IcardId = pm.collectionVariables.get(\"Id\");\r",
							"        pm.expect(iCardDetails.id).equal(IcardId);\r",
							"    });\r",
							"    pm.test(\"deliveryAgentName are showing correct\", function() {\r",
							"        var deliveryAgentName = pm.collectionVariables.get(\"deliveryAgentName\")\r",
							"        pm.expect(iCardDetails.deliveryAgentName).to.equal(deliveryAgentName);\r",
							"    });\r",
							"    pm.test(\"mobileNumber are showing correct\", function() {\r",
							"        var mobileNumber = pm.collectionVariables.get(\"mobileNumber\")\r",
							"        pm.expect(iCardDetails.mobileNumber).to.equal(mobileNumber);\r",
							"    });\r",
							"    pm.test(\"age are showing correct\", function() {\r",
							"        var age = pm.collectionVariables.get(\"age\")\r",
							"        pm.expect(iCardDetails.age).to.equal(age);\r",
							"    });\r",
							"    pm.test(\"stationName are showing correct\", function() {\r",
							"        var stationName = pm.collectionVariables.get(\"stationName\");\r",
							"        pm.expect(iCardDetails.stationName).to.equal(stationName);\r",
							"    })\r",
							"    pm.test(\"stationCode are showing correct\", function() {\r",
							"        var stationCode = pm.collectionVariables.get(\"stationCode\")\r",
							"        pm.expect(iCardDetails.stationCode).to.equal(stationCode);\r",
							"    });\r",
							"    pm.test(\"outletName are showing correct\", function() {\r",
							"        var outletName = pm.collectionVariables.get(\"outletName\");\r",
							"        pm.expect(iCardDetails.outletName).to.equal(outletName);\r",
							"    });\r",
							"    pm.test(\"outletEmail are showing correct\", function() {\r",
							"        var outletMobileNo = pm.collectionVariables.get(\"outletMobileNo\");\r",
							"        pm.expect(iCardDetails.outletMobileNo).to.equal(outletMobileNo);\r",
							"    });\r",
							"    pm.test(\"outletEmail are showing correct\", function() {\r",
							"        var outletEmail = pm.collectionVariables.get(\"outletEmail\");\r",
							"        pm.expect(iCardDetails.outletEmail).to.equal(outletEmail);\r",
							"    });\r",
							"    pm.test(\"fssaiNumber are showing correct\", function() {\r",
							"        var fssaiNumber = pm.collectionVariables.get(\"fssaiNumber\");\r",
							"        pm.expect(iCardDetails.fssaiNumber).to.equal(fssaiNumber);\r",
							"    });\r",
							"    pm.test(\"aadhaarNumber are showing correct\", function() {\r",
							"        var aadhaarNumber = pm.collectionVariables.get(\"aadhaarNumber\");\r",
							"        pm.expect(iCardDetails.aadhaarNumber).to.equal(aadhaarNumber)\r",
							"    });\r",
							"    pm.test(\"Zone status are showing as APPROVED\", function() {\r",
							"        pm.expect(iCardDetails.zoneStatus).to.equal(\"APPROVED\");\r",
							"    });\r",
							"    pm.test(\"ggm status are showing as APPROVED\", function() {\r",
							"        pm.expect(iCardDetails.ggmStatus).to.equal(\"APPROVED\");\r",
							"    })\r",
							"\r",
							"} else if (code == 401) {\r",
							"    postman.setNextRequest(\"GGM I-card list\");\r",
							"} else {\r",
							"    postman.setNextRequest(null);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"_postman_id": "fd18d9ec-20ce-4a50-bb62-4d80e541e38c",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-auth",
						"value": "{{GGM_auth}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"status\": \"APPROVED\",\r\n    \"remarks\": \"All the details are showing correct\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{BaseUrl}}/api/v1/icard/{{Id}}/ggmStatus"
			},
			"response": []
		},
		{
			"name": "Vendor Delivery I-card list",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d9562812-41dd-4fc0-9aa8-750f43a1f1c0",
						"exec": [
							"const code = pm.response.code;\r",
							"\r",
							"if (code == 200) {\r",
							"    pm.test(\"Status code is 200\", function() {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"    pm.test(\"Response time is less than 500ms\", function() {\r",
							"        pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"    });\r",
							"    pm.test(\"Status code name has string OK\", function() {\r",
							"        pm.response.to.have.status(\"OK\");\r",
							"    });\r",
							"    pm.test(\"Content-Type is present\", function() {\r",
							"        pm.response.to.have.header(\"Content-Type\");\r",
							"    });\r",
							"    pm.test(\"Content-Type header has value application/json\", function() {\r",
							"        var content = pm.response.headers.get(\"Content-Type\");\r",
							"        pm.expect(content).equal(\"application/json\");\r",
							"    });\r",
							"    pm.test(\"Status is success\", () => {\r",
							"        pm.expect(pm.response.json().status).equal(\"success\")\r",
							"    });\r",
							"\r",
							"    var jsonData = pm.response.json().result;\r",
							"\r",
							"    pm.test(\"All the details are showing as filled at the time of I-Card creation\", function() {\r",
							"        var IcardId = pm.collectionVariables.get(\"Id\");\r",
							"        var positionOfId = jsonData.deliveryICards.map(\r",
							"            function(find) {\r",
							"                return find.id;\r",
							"            }\r",
							"        ).indexOf(IcardId);\r",
							"        if (positionOfId >= 0) {\r",
							"            var iCardDetails = jsonData.deliveryICards[positionOfId];\r",
							"            pm.test(\"Id are showing correct\", function() {\r",
							"                pm.expect(iCardDetails.id).equal(IcardId);\r",
							"            });\r",
							"            pm.test(\"deliveryAgentName are showing correct\", function() {\r",
							"                var deliveryAgentName = pm.collectionVariables.get(\"deliveryAgentName\")\r",
							"                pm.expect(iCardDetails.deliveryAgentName, \"agentname is not match\").to.equal(deliveryAgentName);\r",
							"            });\r",
							"            pm.test(\"mobileNumber are showing correct\", function() {\r",
							"                var mobileNumber = pm.collectionVariables.get(\"mobileNumber\")\r",
							"                pm.expect(iCardDetails.mobileNumber).to.equal(mobileNumber);\r",
							"            });\r",
							"            pm.test(\"age are showing correct\", function() {\r",
							"                var age = pm.collectionVariables.get(\"age\")\r",
							"                pm.expect(iCardDetails.age).to.equal(age);\r",
							"            });\r",
							"            pm.test(\"stationName are showing correct\", function() {\r",
							"                var stationName = pm.collectionVariables.get(\"stationName\");\r",
							"                pm.expect(iCardDetails.stationName).to.equal(stationName);\r",
							"            })\r",
							"            pm.test(\"stationCode are showing correct\", function() {\r",
							"                var stationCode = pm.collectionVariables.get(\"stationCode\")\r",
							"                pm.expect(iCardDetails.stationCode).to.equal(stationCode);\r",
							"            });\r",
							"            pm.test(\"outletName are showing correct\", function() {\r",
							"                var outletName = pm.collectionVariables.get(\"outletName\");\r",
							"                pm.expect(iCardDetails.outletName).to.equal(outletName);\r",
							"            });\r",
							"            pm.test(\"outletEmail are showing correct\", function() {\r",
							"                var outletMobileNo = pm.collectionVariables.get(\"outletMobileNo\");\r",
							"                pm.expect(iCardDetails.outletMobileNo).to.equal(outletMobileNo);\r",
							"            });\r",
							"            pm.test(\"outletEmail are showing correct\", function() {\r",
							"                var outletEmail = pm.collectionVariables.get(\"outletEmail\");\r",
							"                pm.expect(iCardDetails.outletEmail).to.equal(outletEmail);\r",
							"            });\r",
							"            pm.test(\"fssaiNumber are showing correct\", function() {\r",
							"                var fssaiNumber = pm.collectionVariables.get(\"fssaiNumber\");\r",
							"                pm.expect(iCardDetails.fssaiNumber).to.equal(fssaiNumber);\r",
							"            });\r",
							"            pm.test(\"aadhaarNumber are showing correct\", function() {\r",
							"                var aadhaarNumber = pm.collectionVariables.get(\"aadhaarNumber\");\r",
							"                pm.expect(iCardDetails.aadhaarNumber).to.equal(aadhaarNumber)\r",
							"            });\r",
							"            pm.test(\"Zone status are showing as pending\", function() {\r",
							"                pm.expect(iCardDetails.zoneStatus).to.equal(\"APPROVED\");\r",
							"            });\r",
							"            pm.test(\"ggm status are showing as pending\", function() {\r",
							"                pm.expect(iCardDetails.ggmStatus).to.equal(\"APPROVED\");\r",
							"            })\r",
							"        }\r",
							"    })\r",
							"} else if (code == 401) {\r",
							"    postman.setNextRequest(null);\r",
							"} else {\r",
							"    postman.setNextRequest(null)\r",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "ec7d953e-c41c-41d0-b629-25c6ff0c2002",
						"exec": [
							"const url = pm.environment.get(\"BaseUrl\");\r",
							"const auth = pm.collectionVariables.get(\"Vendor_auth\");\r",
							"\r",
							"if(auth == undefined || auth == null){\r",
							"const postRequest = {\r",
							"    url: ''+url+'/api/v1/auth/user/login',\r",
							"    method: 'POST',\r",
							"    header: {\r",
							"        'Content-Type': 'application/json',\r",
							"    },\r",
							"    body: {\r",
							"    mode: 'raw',\r",
							"    raw: JSON.stringify({\r",
							"        \"mobile\" : \"9898982454\",\r",
							"        \"password\": \"vendor@123\",\r",
							"        })\r",
							"    }\r",
							"};\r",
							"pm.sendRequest(postRequest, (error, response) => {\r",
							"    var x_auth = response.headers.find(h => h.key == \"X-AUTH\");\r",
							"    var token = x_auth.value;\r",
							"    pm.collectionVariables.set(\"Vendor_auth\",token);\r",
							"});\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"_postman_id": "4f293c2d-3f6f-4ebc-9eda-4171e6c4247c",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-auth",
						"value": "{{Vendor_auth}}",
						"type": "text"
					}
				],
				"url": "{{BaseUrl}}/api/v1/icard"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "4372fc0a-1fff-4dda-bcac-0b3be8a7d5c9",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "cb94bfe9-c4a8-498b-a59d-b2ec9657cf98",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "97553b86-33e2-4882-808a-b23ec7238c0c",
			"key": "fssai",
			"value": "",
			"type": "string"
		},
		{
			"id": "ed117bf5-90b0-4eb3-a064-ce4c8f740145",
			"key": "age",
			"value": "",
			"type": "string"
		},
		{
			"id": "121ad029-2111-44a3-8fcf-777f79b25280",
			"key": "MobileNumber",
			"value": "",
			"type": "string"
		},
		{
			"id": "e6e4e78f-9c7a-4c51-b1bc-65cb6541f0cd",
			"key": "aadhaarNumber",
			"value": "",
			"type": "string"
		},
		{
			"id": "2f3b58ed-0f0a-40aa-ba83-fce939a8d0f5",
			"key": "Vendor_auth",
			"value": "",
			"type": "string"
		},
		{
			"id": "1ce5e1f3-0ba9-4b78-9c26-599379b5eeba",
			"key": "Id",
			"value": "",
			"type": "string"
		},
		{
			"id": "6e4c2453-c192-46d8-b5b4-9a04c4a919e4",
			"key": "deliveryAgentName",
			"value": "",
			"type": "string"
		},
		{
			"id": "3f6abb2b-4632-4e74-8f54-6b80d056494c",
			"key": "mobileNumber",
			"value": "",
			"type": "string"
		},
		{
			"id": "3e3f2714-3b7f-4d6e-8f68-f1e6475f981e",
			"key": "stationName",
			"value": "",
			"type": "string"
		},
		{
			"id": "e38b4823-df4e-4c78-b775-98852b658680",
			"key": "stationCode",
			"value": "",
			"type": "string"
		},
		{
			"id": "97570c01-c845-482a-ae06-0450cb2a4021",
			"key": "outletMobileNo",
			"value": "",
			"type": "string"
		},
		{
			"id": "1c12cd89-e681-498f-9c07-3ac1bc86a4d7",
			"key": "outletEmail",
			"value": "",
			"type": "string"
		},
		{
			"id": "d3514d20-87bc-4bbd-8a6b-87595af1b1eb",
			"key": "fssaiNumber",
			"value": "",
			"type": "string"
		},
		{
			"id": "47b99559-c8ef-47df-8e5c-842fc4597b38",
			"key": "Zone_auth",
			"value": "",
			"type": "string"
		}
	]
}