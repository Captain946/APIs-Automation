{
	"info": {
		"_postman_id": "14642bf9-60be-4353-ab56-01f81474e8df",
		"name": "PNR order via vendor Copy",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Get PNR",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "76ee8425-d6fc-45bc-87fa-4e504f0d7cd3",
						"exec": [
							"const stationCode = [\"NDLS\",\"NGP\",\"BPL\",\"BZA\",\"ET\",\"VSKP\",\"PUNE\"];\r",
							"var nextStation = pm.collectionVariables.get(\"nextStation\");\r",
							"if(nextStation == undefined || nextStation == null || nextStation == (stationCode.length - 1)){\r",
							"    pm.collectionVariables.set(\"nextStation\",parseInt(0));\r",
							"    pm.collectionVariables.set(\"station\",stationCode[0]);\r",
							"}else{\r",
							"    pm.collectionVariables.set(\"station\",stationCode[nextStation]);\r",
							"}\r",
							"\r",
							"const prodAuth = pm.environment.get(\"Prod_Auth\");\r",
							"if(prodAuth == null || prodAuth == undefined){\r",
							"    const postRequest = {\r",
							"        url: 'https://www.ecatering.irctc.co.in/api/v1/auth/user/login',\r",
							"        method: 'POST',\r",
							"        header: {\r",
							"            'Content-Type': 'application/json',\r",
							"        },\r",
							"        body: {\r",
							"            mode: 'raw',\r",
							"            raw: JSON.stringify({\r",
							"                \"mobile\": \"9571894947\",\r",
							"                \"password\": \"ManisH123@\",\r",
							"            })\r",
							"        }\r",
							"    };\r",
							"    pm.sendRequest(postRequest, (error, response) => {\r",
							"        var x_auth = response.headers.find(h => h.key == \"X-AUTH\");\r",
							"        var token = x_auth.value;\r",
							"        pm.environment.set(\"Prod_Auth\", token);\r",
							"    });\r",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "7fc83683-fb6f-4a3f-8d88-45b606cf1b3e",
						"exec": [
							"const code = pm.response.code;\r",
							"\r",
							"if (code == 200) {\r",
							"    const moment = require(\"moment\");\r",
							"    const utcDateTime = new Date().toUTCString();\r",
							"    const currentDateTime = moment(utcDateTime).format(\"yyyy-MM-DD HH:mm UTC\");\r",
							"\r",
							"    const resBody = pm.response.json();\r",
							"    const orderDetails = resBody.result.orderList.find(orderStatus => {\r",
							"        return orderStatus.status == \"ORDER_PLACED\" || orderStatus.status == \"ORDER_CONFIRMED\" && orderStatus.deliveryDate > currentDateTime;\r",
							"    })\r",
							"    if(orderDetails != undefined || orderDetails != null){\r",
							"        const pnr = orderDetails.pnr;\r",
							"        pm.collectionVariables.set(\"pnr\", pnr);\r",
							"        postman.setNextRequest(\"PNR\")\r",
							"    }else{\r",
							"        postman.setNextRequest(null)\r",
							"    }\r",
							"}else if(code == 401){\r",
							"    pm.environment.set(\"Prod_Auth\", null);\r",
							"    postman.setNextRequest(\"Get PNR\")\r",
							"}else {\r",
							"    postman.setNextRequest(null);\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "d0536dda-6724-4825-80fd-840fff284c5e",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-auth",
						"value": "{{Prod_Auth}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://www.ecatering.irctc.co.in/api/v1/order/list?stationCode={{station}}",
					"protocol": "https",
					"host": [
						"www",
						"ecatering",
						"irctc",
						"co",
						"in"
					],
					"path": [
						"api",
						"v1",
						"order",
						"list"
					],
					"query": [
						{
							"key": "page",
							"value": "1",
							"disabled": true
						},
						{
							"key": "size",
							"value": "50",
							"disabled": true
						},
						{
							"key": "stationCode",
							"value": "{{station}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "PNR",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "ce6acafd-fadd-4c18-bec1-59fc6aeb5655",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "f0804ee1-19f7-47c3-a1ac-65e6f45ea6f0",
						"exec": [
							"const code = pm.response.code;\r",
							"if(code == 200){\r",
							"\r",
							"    var pnr = pm.request.url.query.get(\"pnr\");\r",
							"    pm.collectionVariables.set(\"PNR\", pnr);\r",
							"    var Auth = pm.response.headers.get(\"X-AUTH\");\r",
							"    pm.environment.set(\"AUTH\", Auth);\r",
							"\r",
							"\r",
							"    var moment = require(\"moment\");\r",
							"pm.test(\"Status code is 200\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response time is less than 2000ms\", function() {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"pm.test(\"Status code name has string OK\", function() {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"pm.test(\"Content-Type is present\", function() {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header has value application/json\", function() {\r",
							"    var content = pm.response.headers.get(\"Content-Type\");\r",
							"    pm.expect(content).equal(\"application/json\");\r",
							"});\r",
							"pm.test(\"Status is success\", () => {\r",
							"    pm.expect(pm.response.json().status).equal(\"success\")\r",
							"});\r",
							"pm.test(\"Stations contain Array\", function() {\r",
							"    var station = pm.response.json().result.stations\r",
							"    pm.expect(station).to.be.a(\"array\");\r",
							"});\r",
							"var jsonData = pm.response.json().result;\r",
							"\r",
							"if (jsonData.stations.length != 0) {\r",
							"    pm.collectionVariables.set(\"totalServiceAbleStations\",jsonData.stations.length)\r",
							"    postman.setNextRequest(\"Outlets\");\r",
							"    var totalStation = jsonData.stations;\r",
							"    for (var i = 0; i < totalStation.length; i++) {\r",
							"\r",
							"        var moment = require(\"moment\");\r",
							"        var station = jsonData.stations[i];\r",
							"\r",
							"        pm.collectionVariables.set(\"StationCode\" + i + \"\", totalStation[i].code);\r",
							"        pm.collectionVariables.set(\"StationName\" + i + \"\", totalStation[i].name);\r",
							"        var ETA = totalStation[i].arrival;\r",
							"        pm.collectionVariables.set(\"eta\" + i + \"\", ETA);\r",
							"        var time = totalStation[i].arrival;\r",
							"        var times = moment(time).format(\"hh:mm\");\r",
							"        pm.collectionVariables.set(\"time\" + i + \"\", times);\r",
							"        var date = totalStation[i].arrival;\r",
							"        var dates = moment(time).format(\"YYYY-MM-DD\");\r",
							"        pm.collectionVariables.set(\"date\" + i + \"\", dates);\r",
							"\r",
							"        \r",
							"\r",
							"        pm.test(\"station Code type is String and value is in Alphabetic\", () => {\r",
							"            var code = station.code;\r",
							"            pm.expect(code).to.be.a(\"string\").and.match(/[A-Z]$/)\r",
							"        })\r",
							"        pm.test(\"station Name type is String and value in Alphabetic\", () => {\r",
							"            var name = station.name;\r",
							"            pm.expect(name).to.be.a(\"string\").and.match(/[A-Za-z]$/)\r",
							"        })\r",
							"        pm.test(\"dayCount field's value has number\", function() {\r",
							"            var day = station.dayCount;\r",
							"            pm.expect(typeof day).to.be.oneOf([\"string\", \"number\"])\r",
							"            pm.expect(day).match(/[0-9]$/);\r",
							"        })\r",
							"\r",
							"        var date = new Date().toUTCString();\r",
							"        var currentDateTime = moment(date).format(\"YYYY-MM-DD HH:mm UTC\");\r",
							"        const serviceStartTime = \"06:00\";\r",
							"        const serviceEndTime = \"23:00\";\r",
							"\r",
							"        pm.test(\"Arrival field format is YYYY-MM-DD HH:mm UTC\", () => {\r",
							"            const arrivalDate = station.arrival;\r",
							"            pm.expect(typeof arrivalDate,\"type are not match\").to.be.oneOf([\"string\", \"number\"]);\r",
							"            pm.expect(arrivalDate,\"formate are not match\").to.match(/^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2} UTC$/);\r",
							"            const arrivalDateTime = moment(arrivalDate).format(\"YYYY-MM-DD HH:mm UTC\")\r",
							"            pm.expect(Date.parse(arrivalDateTime),\"The arrival date are getting in past\").to.be.above(Date.parse(currentDateTime));\r",
							"\r",
							"            const time = moment(arrivalDate).format(\"HH:mm\");\r",
							"\r",
							"            const [Hours, Minutes] = time.split(\":\");\r",
							"            const Hour = parseInt(Hours);\r",
							"            const Minute = parseInt(Minutes);\r",
							"\r",
							"            const [startHours, startMinutes] = serviceStartTime.split(\":\");\r",
							"            const startHour = parseInt(startHours);\r",
							"            const startMinute = parseInt(startMinutes);\r",
							"\r",
							"            const [endHours, endMinutes] = serviceEndTime.split(\":\");\r",
							"            const endHour = parseInt(endHours);\r",
							"            const endMinute = parseInt(endMinutes);\r",
							"\r",
							"            const isWithinServiceableHours = (Hour > startHour || (Hour === startHour && Minute >= startMinute)) && (Hour < endHour || (Hour === endHour && Minute <= endMinute));\r",
							"\r",
							"            pm.expect(isWithinServiceableHours,\"arrival time is not Within Serviceable Hours\").to.be.true;\r",
							"\r",
							"\r",
							"        })\r",
							"        pm.test(\"Departure field format is YYYY-MM-DD HH:mm UTC\", () => {\r",
							"            const departure = station.departure;\r",
							"            pm.expect(typeof departure).to.be.oneOf([\"string\", \"number\"]);\r",
							"            pm.expect(departure).to.match(/^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2} UTC$/);\r",
							"            const departureDateTime = moment(departure).format(\"YYYY-MM-DD HH:mm UTC\")\r",
							"            pm.expect(Date.parse(departureDateTime),\"The arrival date are getting in past\").to.be.above(Date.parse(currentDateTime));\r",
							"        })\r",
							"        pm.test(\"HaltMinutes field has number value\", () => {\r",
							"            var halt = station.haltMinutes;\r",
							"            pm.expect(halt).to.be.a(\"number\").and.match(/[0-9]$/);\r",
							"        })\r",
							"\r",
							"        pm.test(\"speciality field has contain String type value\", function() {\r",
							"            var speciality = station.speciality;\r",
							"            pm.expect(typeof speciality).to.be.oneOf([\"string\", \"null\",\"object\"]);\r",
							"            pm.expect(speciality).match(/[A-Za-z]$/);\r",
							"        })\r",
							"        pm.test(\"specialityImg field has contain the url link of the imge\", function() {\r",
							"            var specialityImg = station.specialityImg;\r",
							"            pm.expect(typeof specialityImg).to.be.oneOf([\"string\",\"null\",\"object\"]);\r",
							"        })\r",
							"        pm.test(\"delayMinutes field has Number value\", () => {\r",
							"            var delay = station.delayMinutes;\r",
							"            pm.expect(typeof delay).to.be.oneOf([\"number\", null]);\r",
							"            pm.expect(delay).match(/[0-9]$/);\r",
							"        })\r",
							"        pm.test(\"minOrderAmount field has number value \", () => {\r",
							"            var minOrderAmount = station.minOrderAmount;\r",
							"            pm.expect(minOrderAmount).to.be.a(\"number\").and.match(/[0-9]$/);\r",
							"        })\r",
							"        pm.test(\"outletCount field has numeric type data\", () => {\r",
							"            var outletCount = station.outletCount;\r",
							"            pm.expect(outletCount).to.be.a(\"number\").and.match(/[0-9]$/);\r",
							"        })\r",
							"\r",
							"        \r",
							"    }\r",
							"}else{\r",
							"    const PNRstations = pm.collectionVariables.get(\"nextStation\");\r",
							"    pm.collectionVariables.set(\"nextStation\",PNRstations + 1 )\r",
							"    postman.setNextRequest(\"Get PNR\");\r",
							"}\r",
							"\r",
							"var trainDetail = jsonData.trainInfo;\r",
							"\r",
							"pm.test(\"trainInfo field has object\", () => {\r",
							"    pm.expect(trainDetail).to.be.a(\"object\");\r",
							"})\r",
							"pm.test(\"trainNo field has number\", () => {\r",
							"    var trainNo = trainDetail.trainNo;\r",
							"    pm.collectionVariables.set(\"trainNo\", trainNo);\r",
							"    pm.expect(typeof trainNo).to.be.oneOf([\"string\", \"number\"]);\r",
							"    pm.expect(trainNo).match(/[0-9]$/);\r",
							"})\r",
							"pm.test(\"Train name field has String & Alphabetic\", () => {\r",
							"    var trainName = trainDetail.name;\r",
							"    pm.collectionVariables.set(\"trainName\", trainName);\r",
							"    pm.expect(trainName).to.be.a(\"string\").and.match(/[A-Z]$/);\r",
							"});\r",
							"pm.test(\"boarding field has String & Alphabetic\", () => {\r",
							"    var boarding = trainDetail.boarding;\r",
							"    pm.expect(boarding).to.be.a(\"string\").and.match(/[A-Z]$/);\r",
							"});\r",
							"pm.test(\"destination field has String & Alphabetic\", () => {\r",
							"    var destination = trainDetail.destination;\r",
							"    pm.expect(destination).to.be.a(\"string\").and.match(/[A-Z]$/);\r",
							"});\r",
							"pm.test(\"dt field has format :- YYYY-MM-DD\", () => {\r",
							"    var dt = trainDetail.dt;\r",
							"    pm.expect(typeof dt).to.be.oneOf([\"string\", \"number\"]);\r",
							"    // pm.expect(dt).match(/^\\d{4}$-d{2}\\d{2}/);\r",
							"    pm.expect(dt).to.include(moment(dt).format(\"YYYY-MM-DD\"), \"getting incorrect date format\");\r",
							"});\r",
							"pm.test(\"boardingDayCount field\", () => {\r",
							"    var boardingDay = trainDetail.boardingDayCount;\r",
							"    pm.expect(typeof boardingDay).to.be.oneOf([\"number\", \"string\", \"null\"]);\r",
							"    pm.expect(boardingDay).match(/[0-9]$/)\r",
							"})\r",
							"pm.test(\"fromStationName field has string value\", () => {\r",
							"    var fromStationName = trainDetail.fromStationName;\r",
							"    pm.expect(typeof fromStationName).to.be.oneOf([\"string\", \"null\"]);\r",
							"    pm.expect(fromStationName).match(/[A-Za-z]$/);\r",
							"})\r",
							"pm.test(\"toStationName field has String value\", () => {\r",
							"    var toStationName = trainDetail.toStationName;\r",
							"    pm.expect(typeof toStationName).to.be.oneOf([\"string\", \"null\"]);\r",
							"    pm.expect(toStationName).match(/[A-Za-z]$/);\r",
							"})\r",
							"pm.test(\"origin field has string value\", () => {\r",
							"    var origin = trainDetail.origin;\r",
							"    pm.expect(typeof origin).to.be.oneOf([\"string\", \"null\"]);\r",
							"    pm.expect(origin).match(/[A-Z]$/);\r",
							"})\r",
							"var seatDetail = jsonData.seatInfo;\r",
							"pm.test(\"seatInfo field has object\", () => {\r",
							"    pm.expect(seatDetail).to.be.a(\"object\");\r",
							"})\r",
							"\r",
							"pm.test(\"coach field has number\", () => {\r",
							"    var coach = seatDetail.coach;\r",
							"    pm.collectionVariables.set(\"coach\", coach);\r",
							"    pm.expect(typeof coach).to.be.oneOf([\"number\", \"string\"]);\r",
							"    pm.expect(coach).match(/[A-Za-z0-9]$/)\r",
							"})\r",
							"pm.test(\"berth field has number\", () => {\r",
							"    var berth = seatDetail.berth;\r",
							"    pm.collectionVariables.set(\"berth\", berth);\r",
							"    pm.expect(typeof berth).to.be.oneOf([\"number\", \"string\"]);\r",
							"    pm.expect(berth).match(/[0-9]$/)\r",
							"})\r",
							"pm.test(\"noOfSeats field has number\", () => {\r",
							"    var noOfSeats = seatDetail.noOfSeats;\r",
							"    pm.collectionVariables.set(\"noOfPassanger\", noOfSeats);\r",
							"    pm.expect(typeof noOfSeats).to.be.oneOf([\"number\", \"string\"]);\r",
							"    pm.expect(noOfSeats).match(/[0-9]$/)\r",
							"})\r",
							"\r",
							"var pantry = jsonData.pantryInfo;\r",
							"if (pantry != null) {\r",
							"    pm.test(\"pantryInfo field has object data type\", () => {\r",
							"        pm.expect(pantry).to.be.an(\"object\");\r",
							"    })\r",
							"    pm.test(\"ispantryAvailable field has value true\", function() {\r",
							"        var ispantryAvailable = pantry.isPantryAvailable;\r",
							"        pm.expect(ispantryAvailable).to.be.true;\r",
							"    })\r",
							"    pm.test(\"Outlet field has numeric value \", function() {\r",
							"        var outletId = pantry.outletId;\r",
							"        pm.expect(outletId).to.be.a(\"number\").and.match(/[0-9]$/);\r",
							"    })\r",
							"    pm.test(\"Outlet field has numeric value \", function() {\r",
							"        var vendorId = pantry.vendorId;\r",
							"        pm.expect(vendorId).to.be.a(\"number\").and.match(/[0-9]$/);\r",
							"    })\r",
							"    pm.test(\"deboardingDate field has numeric value \", function() {\r",
							"        var deboardingDate = pantry.deboardingDate;\r",
							"        pm.expect(deboardingDate).to.be.a(\"string\").and.match(/[0-9]$/);\r",
							"        pm.expect(deboardingDate).to.include(moment(deboardingDate).format(\"YYYY-MM-DD\"));\r",
							"    })\r",
							"    \r",
							"} else {\r",
							"    pm.test(\"Panty is not available on this journey\", function() {\r",
							"        pm.expect(pantry).to.be.null;\r",
							"    })\r",
							"}\r",
							"\r",
							"}else{\r",
							"    postman.setNextRequest(null);\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "99b0a796-6128-4007-b6c0-57eb1cb68dac",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{Base_Url}}/api/v2/pnr/stations?pnr={{pnr}}",
					"host": [
						"{{Base_Url}}"
					],
					"path": [
						"api",
						"v2",
						"pnr",
						"stations"
					],
					"query": [
						{
							"key": "pnr",
							"value": "{{pnr}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Outlets",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "c35e3ddf-69c1-43b4-b9bf-efd6877cfa8c",
						"exec": [
							"const totalServiceAblestation = pm.collectionVariables.get(\"totalServiceAbleStations\");\r",
							"const totalRunOutletApi = pm.collectionVariables.get(\"totalRunOutletApi\");\r",
							"if(totalRunOutletApi == undefined || totalRunOutletApi == null){\r",
							"    stationCode = pm.collectionVariables.get(\"StationCode\" + 0 + \"\");\r",
							"    pm.collectionVariables.set(\"StationCode\",stationCode)\r",
							"    time = pm.collectionVariables.get(\"time\" + 0 + \"\");\r",
							"    pm.collectionVariables.set(\"time\",time);\r",
							"    date = pm.collectionVariables.get(\"date\" + 0 + \"\");\r",
							"    pm.collectionVariables.set(\"date\",date);\r",
							"    pm.collectionVariables.set(\"totalRunOutletApi\" , 0);\r",
							"}else if(totalRunOutletApi < totalServiceAblestation){\r",
							"    stationCode = pm.collectionVariables.get(\"StationCode\" + totalRunOutletApi + \"\");\r",
							"    pm.collectionVariables.set(\"StationCode\",stationCode);\r",
							"    time = pm.collectionVariables.get(\"time\" + totalRunOutletApi + \"\");\r",
							"    pm.collectionVariables.set(\"time\",time);\r",
							"    date = pm.collectionVariables.get(\"date\" + totalRunOutletApi + \"\");\r",
							"    pm.collectionVariables.set(\"date\",date);\r",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "49442a21-754c-4d4c-a2c1-5e067d5bd293",
						"exec": [
							"pm.test(\"Status code is 200\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response time is less than 2000ms\", function() {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"pm.test(\"Status code name has string OK\", function() {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"pm.test(\"Content-Type is present\", function() {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header has value application/json\", function() {\r",
							"    var content = pm.response.headers.get(\"Content-Type\");\r",
							"    pm.expect(content).equal(\"application/json\");\r",
							"});\r",
							"pm.test(\"Status is success\", () => {\r",
							"    pm.expect(pm.response.json().status).equal(\"success\")\r",
							"});\r",
							"var jsonData = pm.response.json().result;\r",
							"pm.test(\"result field has object type\", function() {\r",
							"    pm.expect(jsonData).to.be.a(\"object\");\r",
							"})\r",
							"var vendors = jsonData.vendors;\r",
							"pm.test(\"vendors field has array value\", function() {\r",
							"    pm.expect(vendors).to.be.a(\"array\");\r",
							"})\r",
							"if (vendors.length != 0) {\r",
							"    for (let i = 0; i < vendors.length; i++) {\r",
							"        var vendorDetails = vendors[i];\r",
							"        pm.test(\"id field has number value\", function() {\r",
							"            var id = vendorDetails.id;\r",
							"            pm.expect(id).to.be.a('number').and.match(/[0-9]$/);\r",
							"        });\r",
							"        pm.test(\"name field has string value\", function() {\r",
							"            var name = vendorDetails.name;\r",
							"            pm.expect(name).to.be.a('string').and.match(/[A-Za-z]$/);\r",
							"        })\r",
							"        pm.test(\"ratingValue field has number value\", function() {\r",
							"            var ratingValue = vendorDetails.ratingValue;\r",
							"            pm.expect(ratingValue).to.be.a('number').and.match(/[0-9]$/);\r",
							"        })\r",
							"        pm.test(\"ratingCount field has number value\", function() {\r",
							"            var ratingCount = vendorDetails.ratingCount;\r",
							"            pm.expect(ratingCount).to.be.a('number').and.match(/[0-9]$/);\r",
							"        })\r",
							"        pm.test(\"vendorType field has string value\", function() {\r",
							"            var vendorType = vendorDetails.vendorType;\r",
							"            pm.expect(vendorType).to.be.a('string').and.oneOf([\"VENDOR\", \"AGGREGATOR\"]);\r",
							"        })\r",
							"        pm.test(\"showAsGroup field has boolean value\", function() {\r",
							"            var showAsGroup = vendorDetails.showAsGroup;\r",
							"            pm.expect(showAsGroup).to.be.a('boolean');\r",
							"        })\r",
							"        pm.test(\"cuisines field has array value\", function() {\r",
							"            var cuisines = vendorDetails.cuisines;\r",
							"            pm.expect(cuisines).to.be.a('array');\r",
							"        })\r",
							"        pm.test(\"logo field has string value\", function() {\r",
							"            var logo = vendorDetails.logo;\r",
							"            pm.expect(typeof logo).to.be.oneOf([\"string\", \"null\", \"object\"]);\r",
							"        })\r",
							"        pm.test(\"minOrderValue field has number value\", function() {\r",
							"            var minOrderValue = vendorDetails.minOrderValue;\r",
							"            pm.expect(minOrderValue).to.be.a('number').and.match(/[0-9]$/);\r",
							"        })\r",
							"        var outlets = vendorDetails.outlets;\r",
							"        pm.test(\"outlets field has array value\", function() {\r",
							"            pm.expect(outlets).to.be.a('array');\r",
							"        })\r",
							"        if (outlets.length != 0) {\r",
							"            for (let j = 0; j < outlets.length; j++) {\r",
							"                var outletDetails = outlets[j];\r",
							"                pm.test(\"id field has number value\", function() {\r",
							"                    var id = outletDetails.id;\r",
							"                    pm.expect(id).to.be.a('number').and.match(/[0-9]$/);\r",
							"                });\r",
							"                pm.test(\"name field has string value\", function() {\r",
							"                    var name = outletDetails.name;\r",
							"                    pm.expect(name).to.be.a(\"string\");\r",
							"                });\r",
							"                pm.test(\"minOrderValue field has number value\", function() {\r",
							"                    var minOrderValue = outletDetails.minOrderValue;\r",
							"                    pm.expect(minOrderValue).to.be.a('number').and.match(/[0-9]$/);\r",
							"                });\r",
							"                pm.test(\"prepaid field has boolean value\", function() {\r",
							"                    var prepaid = outletDetails.prepaid;\r",
							"                    pm.expect(prepaid).to.be.a('boolean');\r",
							"                });\r",
							"                pm.test(\"cuisines field has array value\", function() {\r",
							"                    var cuisines = outletDetails.cuisines;\r",
							"                    pm.expect(cuisines).to.be.a('array');\r",
							"                });\r",
							"                pm.test(\"ratingValue field has number value\", function() {\r",
							"                    var ratingValue = outletDetails.ratingValue;\r",
							"                    pm.expect(ratingValue).to.be.a('number').and.match(/[0-9]$/);\r",
							"                });\r",
							"                pm.test(\"ratingCount field has number value\", function() {\r",
							"                    var ratingCount = outletDetails.ratingCount;\r",
							"                    pm.expect(ratingCount).to.be.a('number').and.match(/[0-9]$/);\r",
							"                });\r",
							"                pm.test(\"orderByTime field has string value\", function() {\r",
							"                    var orderByTime = outletDetails.orderByTime;\r",
							"                    pm.expect(orderByTime).to.be.a('string').and.match(/\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2} UTC$/);\r",
							"                });\r",
							"                pm.test(\"logo field has string value\", function() {\r",
							"                    var logo = outletDetails.logo;\r",
							"                    pm.expect(typeof logo).to.be.oneOf([\"null\", \"string\", \"object\"]);\r",
							"                })\r",
							"                pm.test(\"vendorId field has number value\", function() {\r",
							"                    var vendorId = outletDetails.vendorId;\r",
							"                    pm.expect(vendorId).to.be.a('number').and.match(/[0-9]$/);\r",
							"                })\r",
							"                pm.test(\"deliveryCharge field has number value\", function() {\r",
							"                    var deliveryCharge = outletDetails.deliveryCharge;\r",
							"                    pm.expect(deliveryCharge).to.be.a('number').and.match(/[0-9]$/);\r",
							"                })\r",
							"                pm.test(\"speciality field has null or string value\", function() {\r",
							"                    var speciality = outletDetails.speciality;\r",
							"                    pm.expect(typeof speciality).to.be.oneOf([\"null\", \"string\", \"object\"]);;\r",
							"                })\r",
							"                pm.test(\"specialityImg field has null or string value\", function() {\r",
							"                    var specialityImg = outletDetails.specialityImg;\r",
							"                    pm.expect(typeof specialityImg).to.be.oneOf(['string', \"null\", \"object\"]);\r",
							"                })\r",
							"            }\r",
							"        } else {\r",
							"            const totalServiceAblestation = pm.collectionVariables.get(\"totalServiceAbleStations\");\r",
							"            const totalRunOutletApi = pm.collectionVariables.get(\"totalRunOutletApi\");\r",
							"            if (totalServiceAblestation == totalRunOutletApi) {\r",
							"                postman.setNextRequest(null)\r",
							"                pm.collectionVariables.set(\"totalRunOutletApi\", null);\r",
							"            } else {\r",
							"                pm.collectionVariables.set(\"totalRunOutletApi\", parseInt(totalRunOutletApi + 1));\r",
							"                postman.setNextRequest(\"Outlets\");\r",
							"            }\r",
							"        }\r",
							"    }\r",
							"} else {\r",
							"    const totalServiceAblestation = pm.collectionVariables.get(\"totalServiceAbleStations\");\r",
							"    const totalRunOutletApi = pm.collectionVariables.get(\"totalRunOutletApi\");\r",
							"    if (totalServiceAblestation == totalRunOutletApi) {\r",
							"        pm.collectionVariables.set(\"totalRunOutletApi\", null);\r",
							"        postman.setNextRequest(null)\r",
							"    } else {\r",
							"        pm.collectionVariables.set(\"totalRunOutletApi\", parseInt(totalRunOutletApi + 1));\r",
							"        postman.setNextRequest(\"Outlets\");\r",
							"    }\r",
							"}\r",
							"\r",
							"pm.test(\"station name field has string value\", function() {\r",
							"    var stationName = jsonData.stationName;\r",
							"    pm.expect(stationName).to.be.a(\"string\");\r",
							"})\r",
							"pm.test(\"stationCode field has string value\", function() {\r",
							"    var stationCode = jsonData.stationCode;\r",
							"    pm.expect(stationCode).to.be.a(\"string\");\r",
							"})\r",
							"\r",
							"const code = pm.response.code;\r",
							"if (code == 200) {\r",
							"    const vendor = jsonData.vendors.find((type) => {\r",
							"        return type.vendorType == \"VENDOR\"\r",
							"    });\r",
							"\r",
							"    if (vendor != undefined) {\r",
							"        const outlet = vendor.outlets.find((prepaid) => {\r",
							"            return prepaid.prepaid == false || prepaid.prepaid == \"false\";\r",
							"        });\r",
							"        if (outlet != undefined) {\r",
							"            pm.collectionVariables.set(\"VendorId\", vendor.id);\r",
							"            pm.collectionVariables.set(\"OutletId\", outlet.id);\r",
							"            pm.collectionVariables.set(\"deliveryCharge\", outlet.deliveryCharge)\r",
							"            postman.setNextRequest(\"Menu\")\r",
							"        } else {\r",
							"            const totalServiceAblestation = pm.collectionVariables.get(\"totalServiceAbleStations\");\r",
							"            const totalRunOutletApi = pm.collectionVariables.get(\"totalRunOutletApi\");\r",
							"            if (totalServiceAblestation == totalRunOutletApi) {\r",
							"                const next = pm.collectionVariables.get(\"nextStation\");\r",
							"                pm.collectionVariables.set(\"nextStation\", parseInt(next + 1))\r",
							"                pm.collectionVariables.set(\"totalRunOutletApi\", null)\r",
							"                postman.setNextRequest(\"Get PNR\")\r",
							"            }\r",
							"        }\r",
							"    } else {\r",
							"        const totalServiceAblestation = pm.collectionVariables.get(\"totalServiceAbleStations\");\r",
							"        const totalRunOutletApi = pm.collectionVariables.get(\"totalRunOutletApi\");\r",
							"        if (totalServiceAblestation == totalRunOutletApi) {\r",
							"            const next = pm.collectionVariables.get(\"nextStation\");\r",
							"            pm.collectionVariables.set(\"nextStation\", parseInt(next + 1))\r",
							"            pm.collectionVariables.set(\"totalRunOutletApi\", null)\r",
							"            postman.setNextRequest(\"Get PNR\")\r",
							"        }\r",
							"    }\r",
							"} else {\r",
							"    postman.setNextRequest(null);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "1a7b37b4-1580-492e-aa52-2a6e979b3c78",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-auth",
						"value": "{{AUTH}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{Base_Url}}/api/v2/station/outlets?stationCode={{StationCode}}&time={{time}}&date={{date}}",
					"host": [
						"{{Base_Url}}"
					],
					"path": [
						"api",
						"v2",
						"station",
						"outlets"
					],
					"query": [
						{
							"key": "stationCode",
							"value": "{{StationCode}}"
						},
						{
							"key": "time",
							"value": "{{time}}"
						},
						{
							"key": "date",
							"value": "{{date}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Menu",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "21695bbb-5c94-4888-ae47-12bd191556f8",
						"exec": [
							"var jsonData = pm.response.json().result;\r",
							"\r",
							"pm.test(\"Status code is 200\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response time is less than 500ms\", function() {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"pm.test(\"Status code name has string OK\", function() {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"pm.test(\"Content-Type is present\", function() {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header has value application/json\", function() {\r",
							"    var content = pm.response.headers.get(\"Content-Type\");\r",
							"    pm.expect(content).equal(\"application/json\");\r",
							"});\r",
							"pm.test(\"OutletId field has numeric value\", function() {\r",
							"    var OutletId = jsonData.outletId;\r",
							"    var outletid = pm.collectionVariables.get(\"OutletId\");\r",
							"    pm.expect(OutletId).to.be.a(\"number\").and.match(/[0-9]$/);\r",
							"    pm.expect(OutletId).to.be.equal(outletid);\r",
							"})\r",
							"pm.test(\"VendorId field has numeric value\", function() {\r",
							"    var VendorId = jsonData.vendorId;\r",
							"    var vendorid = pm.collectionVariables.get(\"VendorId\");\r",
							"    pm.expect(VendorId).to.be.a(\"number\").and.match(/[0-9]$/);\r",
							"    pm.expect(VendorId).to.be.equal(vendorid);\r",
							"})\r",
							"pm.test(\"ValidateCart field has boolean value\", () => {\r",
							"    var ValidateCart = jsonData.validateCart;\r",
							"    pm.expect(ValidateCart).to.be.a(\"boolean\");\r",
							"});\r",
							"\r",
							"    var cate = jsonData.categories;\r",
							"    // if(cate.length == 0){\r",
							"    //     // postman.sendRequest(null);\r",
							"    // }\r",
							"    for (var i = 0; i < cate.length; i++) {\r",
							"        var categories = cate[i];\r",
							"        pm.test(\"Name field has string type data\", function() {\r",
							"            var name = categories.name;\r",
							"            pm.expect(name).to.be.a(\"string\").and.match(/[A-Za-z]$/);\r",
							"        })\r",
							"        pm.test(\"ShowExpanded field has Boolean type data\", () => {\r",
							"            var showExpanded = categories.showExpanded;\r",
							"            pm.expect(showExpanded).to.be.a(\"boolean\");\r",
							"        })\r",
							"        pm.test(\"foodType field has Upper case and String type data\", () => {\r",
							"            var foodType = categories.foodType;\r",
							"            pm.expect(foodType).to.be.a(\"string\").and.match(/[A-Z]$/);\r",
							"        })\r",
							"        pm.test(\"viewTyoe field has Upper case and String type data\", () => {\r",
							"            var viewType = categories.viewType;\r",
							"            pm.expect(viewType).to.be.a(\"string\").and.match(/[A-Z]$/);\r",
							"        })\r",
							"        pm.test(\"items field has Array type data\", () => {\r",
							"            var items = categories.items;\r",
							"            pm.expect(items).to.be.a(\"array\");\r",
							"        })\r",
							"        var categ = categories.items;\r",
							"        // if(categ.length != 0){\r",
							"        //     postman.sendRequest(\"Customer\");\r",
							"        // }else{\r",
							"        //     pm.sendRequest(null);\r",
							"        // }\r",
							"        for (var j = 0; j < categ.length; j++) {\r",
							"            var Items = categ[j];\r",
							"            pm.test(\"id field has numeric type data\", () => {\r",
							"                var id = Items.id;\r",
							"                pm.expect(id).to.be.a(\"number\").and.match(/[0-9]$/);\r",
							"            })\r",
							"            pm.test(\"itemName field has String type data\", () => {\r",
							"                var itmeName = Items.itemName;\r",
							"                pm.expect(itmeName).to.be.a(\"string\").and.length.below(250);\r",
							"            })\r",
							"            pm.test(\"description field has null or string value maximum length is 300\", () => {\r",
							"                var description = Items.description;\r",
							"                pm.expect(typeof description).to.be.oneOf([\"string\", \"object\", \"null\"]);\r",
							"                // pm.expect(description).length.below(300);\r",
							"            })\r",
							"            pm.test(\"Base price field has numeric type data \", () => {\r",
							"                var basePrice = Items.basePrice;\r",
							"                pm.expect(basePrice).to.be.a(\"number\").and.match(/[0-9]$/);\r",
							"            })\r",
							"            pm.test(\"sellingPrice field has numeric type data\", () => {\r",
							"                var sellingPrice = Items.sellingPrice;\r",
							"                var basePrice = Items.basePrice;\r",
							"                var gst = Items.taxRate;\r",
							"                pm.expect(sellingPrice).to.be.a(\"number\").and.match(/[0-9]$/).and.equal(parseFloat((basePrice + gst)));\r",
							"\r",
							"            })\r",
							"            pm.test(\"taxRate field has number type data\", () => {\r",
							"                var taxRate = Items.taxRate;\r",
							"                var basePrice = Items.basePrice;\r",
							"                if (categories.foodType == \"RAILNEER\") {\r",
							"                    var value = (basePrice * 0.18).toFixed(2)\r",
							"                    pm.expect(taxRate).to.be.a(\"number\").and.to.match(/[0-9]$/).and.to.equal(parseFloat(value));\r",
							"                } else {\r",
							"                    pm.expect(taxRate).to.be.a(\"number\").and.to.match(/[0-9]$/).and.to.equal(parseFloat((basePrice * 0.05).toFixed(2)));\r",
							"                }\r",
							"            })\r",
							"            pm.test(\"isVegeterian field has boolean type data\", function() {\r",
							"                var isVegeterian = Items.isVegetarian;\r",
							"                pm.expect(isVegeterian).to.be.a(\"boolean\");\r",
							"            })\r",
							"            pm.test(\"image field has null or string type value \", () => {\r",
							"                var image = Items.image;\r",
							"                pm.expect(typeof image).to.be.oneOf([\"object\", \"string\", null]);\r",
							"            })\r",
							"            pm.test(\"neonUrl field has null or string type data\", () => {\r",
							"                var neonUrl = Items.neonUrl;\r",
							"                pm.expect(typeof neonUrl).to.be.oneOf([\"string\", \"object\", \"null\"])\r",
							"            })\r",
							"            pm.test(\"Cuisine field has Upper case and String type data\", () => {\r",
							"                var cuisine = Items.cuisine;\r",
							"                pm.expect(cuisine).to.be.a(\"string\").and.match(/[A-Z]$/);\r",
							"            })\r",
							"            var sche = categ[j].schedules;\r",
							"            pm.test(\"schedule field has null type data\", function() {\r",
							"                pm.expect(sche).to.be.null;\r",
							"            })\r",
							"\r",
							"            pm.test(\"customisations field has null type value\", () => {\r",
							"                var customisations = Items.customisations;\r",
							"                pm.expect(customisations).to.be.a(\"null\");\r",
							"            })\r",
							"        }\r",
							"    }\r",
							"\r",
							"if(jsonData.categories.length != 0){\r",
							"    const catego =  jsonData.categories.find((item) => {\r",
							"    if(item.items.length != 0){\r",
							"        return item.items;\r",
							"    }\r",
							"})\r",
							"if(catego != undefined){\r",
							"    let maxBasePrice = 0;\r",
							"    for(let itm of catego.items){\r",
							"        if(itm.customisations == null){\r",
							"            const baseprice = itm.basePrice;\r",
							"            if(baseprice > maxBasePrice){\r",
							"                maxBasePrice = baseprice;\r",
							"            }\r",
							"        }\r",
							"    }\r",
							"    const items = catego.items.find((menu) => {\r",
							"        return menu.basePrice == maxBasePrice;\r",
							"    })\r",
							"    if(items != undefined){\r",
							"        pm.collectionVariables.set(\"Id1\", items.id);\r",
							"        pm.collectionVariables.set(\"BasePrice\", items.basePrice);\r",
							"        postman.setNextRequest(\"Customer\");\r",
							"    }else{\r",
							"        postman.setNextRequest(null)\r",
							"    }\r",
							"}else{\r",
							"    postman.setNextRequest(null)\r",
							"}\r",
							"}else{\r",
							"    postman.setNextRequest(null)\r",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "d0d49814-fc25-40e3-97fe-48b19089b2f8",
						"exec": [
							"// // var Token = pm.collectionVariables.get(\"X-AUTH\");\r",
							"// // if(Token == undefined){\r",
							"//     const postRequest = {\r",
							"//         url: 'https://stage-ecatering.ipsator.com/api/v2/customer',\r",
							"//         method: 'POST',\r",
							"//         header: {\r",
							"//             'Content-Type': 'application/json',\r",
							"//         },\r",
							"//         body: {\r",
							"//         mode: 'raw',\r",
							"//         raw: JSON.stringify({\r",
							"//             \"mobile\" : \"9571894947\",\r",
							"//             \"fullName\" : \"Manish\",\r",
							"//             \"email\": \"manish@testing.com\",\r",
							"//             \"createAt\" : \"desktop web\"\r",
							"//             })\r",
							"//         }\r",
							"//     };\r",
							"//     pm.sendRequest(postRequest, (error, response) => {\r",
							"//         var x_auth = response.headers.find(h => h.key == \"X-AUTH\");\r",
							"//         var token = x_auth.value;\r",
							"//         pm.collectionVariables.set(\"X-AUTH\",token);\r",
							"//         var customerId = response.json().result.id;\r",
							"//         pm.collectionVariables.set(\"CustomerId\",customerId);\r",
							"//     });\r",
							"// // }"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "80a312a6-6aa0-4eb6-9423-5b5a29a9dc02",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-auth",
						"value": "{{AUTH}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{Base_Url}}/api/v2/vendor/{{VendorId}}/outlet/{{OutletId}}/menu/active?time={{time}}&date={{date}}&stationCode={{StationCode}}&trainClass={{noOfPassanger}}&noOfPassengers={{noOfPassanger}}",
					"host": [
						"{{Base_Url}}"
					],
					"path": [
						"api",
						"v2",
						"vendor",
						"{{VendorId}}",
						"outlet",
						"{{OutletId}}",
						"menu",
						"active"
					],
					"query": [
						{
							"key": "time",
							"value": "{{time}}"
						},
						{
							"key": "date",
							"value": "{{date}}"
						},
						{
							"key": "stationCode",
							"value": "{{StationCode}}"
						},
						{
							"key": "trainClass",
							"value": "{{noOfPassanger}}"
						},
						{
							"key": "noOfPassengers",
							"value": "{{noOfPassanger}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Customer",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "41388582-604d-4d9b-bf92-3d2a1c9a9721",
						"exec": [
							"pm.test(\"Status code is 201\", function() {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.collectionVariables.set(\"AUTH\", pm.response.headers.get(\"X-AUTH\"));\r",
							"});\r",
							"pm.test(\"Response time is less than 500ms\", function() {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"pm.test(\"Status code name has string OK\", function() {\r",
							"    pm.response.to.have.status(\"Created\");\r",
							"});\r",
							"pm.test(\"Content-Type is present\", function() {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header has value application/json\", function() {\r",
							"    var content = pm.response.headers.get(\"Content-Type\");\r",
							"    pm.expect(content).equal(\"application/json\");\r",
							"});\r",
							"pm.test(\"Status is success\", () => {\r",
							"    pm.expect(pm.response.json().status).equal(\"success\")\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json().result;\r",
							"\r",
							"pm.test(\"id field has numeric data type\", function() {\r",
							"    var id = jsonData.id;\r",
							"    pm.collectionVariables.set(\"CustomerId\", id);\r",
							"    pm.expect(id).to.be.a(\"number\").and.to.match(/[0-9]$/);\r",
							"})\r",
							"pm.test(\"fullName field has string type data\", function() {\r",
							"    var fullName = jsonData.fullName;\r",
							"    pm.collectionVariables.set(\"CustomerName\", fullName);\r",
							"    pm.expect(fullName).to.be.a(\"string\").and.to.match(/[A-Za-z]$/);\r",
							"})\r",
							"pm.test(\"email field has string type data with valid format\", function() {\r",
							"    var email = jsonData.email;\r",
							"    pm.collectionVariables.set(\"CustomerEmail\", email);\r",
							"    pm.expect(email).to.be.a(\"string\");\r",
							"})\r",
							"pm.test(\"mobile field has string type data with numeric format\", function() {\r",
							"    var mobile = jsonData.mobile;\r",
							"    pm.expect(typeof mobile).to.be.oneOf([\"string\", \"number\"]);\r",
							"    pm.collectionVariables.set(\"CustomerPhone\", mobile);\r",
							"    pm.expect(mobile).to.match(/[0-9]$/);\r",
							"})\r",
							"pm.test(\"gender field has Null value\", function() {\r",
							"    var gender = jsonData.gender;\r",
							"    pm.expect(gender).to.be.null;\r",
							"})\r",
							"pm.test(\"profilePictureUrl field has null value\", function() {\r",
							"    var profilePictureUrl = jsonData.profilePictureUrl;\r",
							"    pm.expect(profilePictureUrl).to.be.null;\r",
							"})\r",
							"pm.test(\"emailVerified field has boolean value\", function() {\r",
							"    var emailVerified = jsonData.emailVerified;\r",
							"    pm.expect(emailVerified).to.be.a(\"boolean\");\r",
							"})\r",
							"pm.test(\"mobileVerified field has boolean value\", function() {\r",
							"    var mobileVerified = jsonData.mobileVerified;\r",
							"    pm.expect(mobileVerified).to.be.a(\"boolean\");\r",
							"})\r",
							"pm.test(\"isActive field has boolean value\", function() {\r",
							"    var isActive = jsonData.isActive;\r",
							"    pm.expect(isActive).to.be.a(\"boolean\");\r",
							"})\r",
							"var coupon = jsonData.coupons;\r",
							"if (coupon.length != null) {\r",
							"    for (var i = 0; i < coupon.length; i++) {\r",
							"        var couponDetail = coupon[i];\r",
							"        pm.test(\"id field has number value\", function() {\r",
							"            var id = couponDetail.id;\r",
							"            pm.expect(id).to.be.a(\"number\").and.to.match(/[0-9]$/);\r",
							"        })\r",
							"        pm.test(\"couponCode field has alphanumeric\", function() {\r",
							"            var couponCode = couponDetail.couponCode;\r",
							"            pm.expect(couponCode).to.be.a(\"string\").and.to.match(/[A-Z0-9]$/);\r",
							"        })\r",
							"        pm.test(\"type field has value FLAT in string format\", function() {\r",
							"            var type = couponDetail.type;\r",
							"            pm.expect(type).to.be.a(\"string\").and.to.match(/[A-Z]$/).and.to.equal(\"FLAT\");\r",
							"        })\r",
							"        pm.test(\"Value field has number value equal to 100\", function() {\r",
							"            var value = couponDetail.value;\r",
							"            pm.expect(value).to.be.a(\"number\").and.to.be.equal(100).and.to.match(/[0-9]$/);\r",
							"        })\r",
							"        pm.test(\"minimuOrderAmount field has number value \", function() {\r",
							"            var minimumOrderAmount = couponDetail.minimumOrderAmount;\r",
							"            pm.expect(minimumOrderAmount).to.be.a(\"number\").and.to.match(/[0-9]$/);\r",
							"        });\r",
							"        pm.test(\"maximumOrderAmount field has number value\", function() {\r",
							"            var maximumOrderAmount = couponDetail.maximumOrderAmount;\r",
							"            pm.expect(maximumOrderAmount).to.be.a(\"number\").and.to.match(/[0-9]$/);\r",
							"        })\r",
							"        pm.test(\"source field has string type data and equla to undelivery\", function() {\r",
							"            var source = couponDetail.source;\r",
							"            pm.expect(source).to.be.a(\"string\").and.to.match(/[a-z]$/).and.to.equal(\"undelivery\");\r",
							"        })\r",
							"    }\r",
							"}\r",
							"pm.test(\"createdFrom field has null value\", function() {\r",
							"    var createdFrom = jsonData.createdFrom;\r",
							"    pm.expect(createdFrom).to.be.a(\"string\");\r",
							"    pm.collectionVariables.set(\"Device\", createdFrom)\r",
							"})\r",
							"pm.test(\"isNewUser field has boolean type data\", function() {\r",
							"    var isNewUser = jsonData.isNewUser;\r",
							"    pm.expect(isNewUser).to.be.a(\"boolean\");\r",
							"})\r",
							"    \r",
							"var coupon = jsonData.coupons;\r",
							"if (coupon.length != 0) {\r",
							"    var couponId = coupon[0].couponCode;\r",
							"    pm.collectionVariables.set(\"Discount\", JSON.stringify(couponId));\r",
							"    postman.setNextRequest(\"Coupon validate\")\r",
							"} else if (coupon.length == 0){\r",
							"    postman.setNextRequest(\"Payment available\");\r",
							"    pm.collectionVariables.set(\"Discount\", JSON.stringify(null));\r",
							"}else{\r",
							"    postman.setNextRequest(null);\r",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "16f473cb-fdf7-478d-841c-bb8b145f4713",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "393bf66c-7d37-4ff0-a171-79eb6f46e74a",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"createdFrom\": \"desktop web\",\r\n    \"email\": \"testing@testing.com\",\r\n    \"fullName\": \"Manish\",\r\n    \"mobile\": \"9571894947\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{Base_Url}}/api/v2/customer"
			},
			"response": []
		},
		{
			"name": "Coupon validate",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "9977191d-1140-4529-b208-d51cab4d85f8",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "cbac63d5-0d80-4aea-b2f8-1a8ac123a1a9",
						"exec": [
							"if(pm.response.code == 200){\r",
							"    const reqbody = JSON.parse(pm.request.body.raw)\r",
							"\r",
							"    postman.setNextRequest(\"Payment available\")\r",
							"\r",
							"    pm.test(\"Status code is 200\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response time is less than 500ms\", function() {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"pm.test(\"Status code name has string OK\", function() {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"pm.test(\"Content-Type is present\", function() {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header has value application/json\", function() {\r",
							"    var content = pm.response.headers.get(\"Content-Type\");\r",
							"    pm.expect(content).equal(\"application/json\");\r",
							"});\r",
							"pm.test(\"Status is success\", () => {\r",
							"    pm.expect(pm.response.json().status).equal(\"success\")\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json().result;\r",
							"\r",
							"pm.test(\"cart should be showing null\", function(){\r",
							"    var cart = jsonData.cart;\r",
							"    pm.expect(cart).to.be.null;\r",
							"});\r",
							"\r",
							"pm.test(\"coupon field has own property object\", function(){\r",
							"    var coupon = jsonData.coupon;\r",
							"    pm.expect(coupon).to.be.a(\"object\");\r",
							"})\r",
							"\r",
							"pm.test(\"discount amount should be showing as 100\", function(){\r",
							"    var discount = jsonData.coupon.result.discountAmount;\r",
							"    pm.expect(discount).to.be.a(\"number\").and.to.equal(100);\r",
							"})\r",
							"const basePrice = pm.collectionVariables.get(\"BasePrice\");\r",
							"const quantity = reqbody.orderItems[0].quantity\r",
							"const totalBasePrice = basePrice * quantity;\r",
							"const gstOfBasePrice = totalBasePrice * 0.05;\r",
							"\r",
							"pm.test(\"gst field has number value\", function(){\r",
							"    const gst = jsonData.coupon.result.gst;\r",
							"    pm.expect(gst).to.be.a(\"number\").and.to.match(/[0-9]$/);\r",
							"    pm.expect(gst).to.equal(gstOfBasePrice);\r",
							"});\r",
							"\r",
							"pm.test(\"amountPayable field has number value\", function(){\r",
							"    var amountPayable = jsonData.coupon.result.amountPayable;\r",
							"    pm.expect(amountPayable).to.be.a(\"number\").and.to.match(/[0-9]$/);\r",
							"    const payableAmount = (totalBasePrice + gstOfBasePrice) - 100;\r",
							"    pm.expect(amountPayable).to.equal(payableAmount);\r",
							"    pm.collectionVariables.set(\"Price\",amountPayable)\r",
							"\r",
							"});\r",
							"\r",
							"}else{\r",
							"    postman.setNextRequest(null)\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "ae07facc-863c-40ce-a598-2438e082c405",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-auth",
						"value": "{{AUTH}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"berth\": \"{{berth}}\",\r\n    \"coach\": \"{{coach}}\",\r\n    \"trainName\": \"{{trainName}}\",\r\n    \"trainNo\": \"{{trainNo}}\",\r\n    \"pnr\": \"{{PNR}}\",\r\n    \"stationCode\": \"{{StationCode}}\",\r\n    \"stationName\": \"{{StationName}}\",\r\n    \"deliveryDate\": \"{{eta}}\",\r\n    \"outlet\": {\r\n        \"id\": {{OutletId}},\r\n        \"vendor\": {\r\n            \"id\": {{VendorId}}\r\n        }\r\n    },\r\n    \"customer\": {\r\n        \"id\": {{CustomerId}}\r\n    },\r\n    \"orderFrom\": \"{{Device}}\",\r\n    \"orderItems\": [\r\n        {\r\n            \"itemId\": {{Id1}},\r\n            \"id\": {{Id1}},\r\n            \"quantity\": 2\r\n        }\r\n    ],\r\n    \"alternateMobileNumber\": null,\r\n    \"gstin\": null,\r\n    \"comment\": null,\r\n    \"cartId\": null,\r\n    \"couponCode\": \"{{Discount}}\",\r\n    \"paymentType\": \"CASH_ON_DELIVERY\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{Base_Url}}/api/v2/order/cart/validate"
			},
			"response": []
		},
		{
			"name": "Payment available",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "fb672152-ea1b-4713-ab8f-a4e35abfb227",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "3e147fbb-e7de-49df-9572-a8465994934d",
						"exec": [
							"\r",
							"pm.test(\"Status code is 200\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function() {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code name has string OK\", function() {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function() {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header has value application/json\", function() {\r",
							"    var content = pm.response.headers.get(\"Content-Type\");\r",
							"    pm.expect(content).equal(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Status is success\", () => {\r",
							"    pm.expect(pm.response.json().status).equal(\"success\");\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json().result;\r",
							"\r",
							"pm.test(\"result field has not empty\", function() {\r",
							"    pm.expect(jsonData).to.not.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"payment available field has boolean value\", function() {\r",
							"    var payment = jsonData.paymentAvailable;\r",
							"    pm.expect(payment).to.be.a(\"boolean\");\r",
							"});\r",
							"pm.test(\"options Available is not empty\", function() {\r",
							"    var optionsAvailable = jsonData.optionsAvailable;\r",
							"    pm.expect(optionsAvailable).to.be.a(\"array\").and.not.empty;\r",
							"});\r",
							"var paymentOption = jsonData.optionsAvailable;\r",
							"if (paymentOption.length != 0) {\r",
							"    \r",
							"    postman.setNextRequest(\"Create Order\");\r",
							"    for (let i = 0; i < paymentOption.length; i++) {\r",
							"        var paymentMethod = paymentOption[i];\r",
							"        pm.test(\"id field has string value\", function() {\r",
							"            var id = paymentMethod.id;\r",
							"            pm.expect(id).to.be.a(\"string\").and.oneOf([\"razorpay\", \"paytm\", \"cod\"]);\r",
							"        })\r",
							"        pm.test(\"enabled field has boolean value\", function() {\r",
							"            var enabled = paymentMethod.enabled;\r",
							"            pm.expect(enabled).to.be.a(\"boolean\");\r",
							"        })\r",
							"        pm.test(\"message field has empty value\", function() {\r",
							"            var message = paymentMethod.message;\r",
							"            pm.expect(message).to.be.empty;\r",
							"        })\r",
							"    }\r",
							"\r",
							"} else {\r",
							"    postman.setNextRequest(null);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "4d429fcc-1e70-4262-8810-c07c5d0e4e03",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-auth",
						"value": "{{AUTH}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"amount\": {{BasePrice}},\r\n    \"platform\": \"{{Device}}\",\r\n    \"outletId\": {{OutletId}},\r\n    \"vendorId\": {{VendorId}},\r\n    \"stationCode\": \"{{StationCode}}\",\r\n    \"customerId\": {{CustomerId}},\r\n    \"pnr\": \"{{PNR}}\",\r\n    \"cartId\": null,\r\n    \"trainNo\": \"{{TrainNo}}\",\r\n    \"eta\": \"{{eta}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{Base_Url}}/api/v2/payment/available"
			},
			"response": []
		},
		{
			"name": "Create Order",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "edd9b25c-12d5-4448-b706-353ee697055f",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "4f8775c3-1709-48ee-a61b-f87c790fab89",
						"exec": [
							"const code = pm.response.code;\r",
							"\r",
							"if(code == 201){\r",
							"var moment = require(\"moment\");\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"pm.test(\"Status code name has string Created\", function () {\r",
							"    pm.response.to.have.status(\"Created\");\r",
							"});\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header has value application/json\", function () {\r",
							"    var content = pm.response.headers.get(\"Content-Type\");\r",
							"    pm.expect(content).equal(\"application/json\");\r",
							"});\r",
							"pm.test(\"Status is success\", () => {\r",
							"    pm.expect(pm.response.json().status).equal(\"success\")\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json().result;\r",
							"\r",
							"pm.test(\"result field has object type data\", () => {\r",
							"    pm.expect(jsonData).to.be.a(\"object\");\r",
							"})\r",
							"pm.test(\"id field has numeric type data\", () => {\r",
							"    var id = jsonData.id;\r",
							"    pm.expect(id).to.be.a(\"number\").and.match(/[0-9]$/);\r",
							"    pm.collectionVariables.set(\"orderId\", id);\r",
							"})\r",
							"pm.test(\"invoiceUrl field has null value\", () => {\r",
							"    var invoiceUrl = jsonData.invoiceUrl;\r",
							"    pm.expect(invoiceUrl).to.be.a(\"null\");\r",
							"})\r",
							"pm.test(\"canCancel field has boolean value and should be showing false\", () => {\r",
							"    var canCancel = jsonData.canCancel;\r",
							"    pm.expect(canCancel).to.be.a(\"boolean\");\r",
							"})\r",
							"pm.test(\"otp field has numeric type data\", () => {\r",
							"    var otp = jsonData.otp;\r",
							"    pm.expect(typeof otp).to.be.oneOf([\"string\", \"number\"]);\r",
							"    pm.expect(otp).match(/[0-9]$/);\r",
							"});\r",
							"pm.test(\"subtotal field has numeric type data and value equal to total of all the menu items base price\", () => {\r",
							"    var subtotal = jsonData.subtotal;\r",
							"    pm.expect(subtotal).to.be.a(\"number\").match(/[0-9]$/);\r",
							"    var menuBasePrice = jsonData.orderItems;\r",
							"    var totalValue = 0;\r",
							"    for (var i = 0; i < menuBasePrice.length; i++) {\r",
							"        var baseprice = menuBasePrice[i].basePrice;\r",
							"        var quantity = menuBasePrice[i].quantity\r",
							"        var totalValue = totalValue + (baseprice*quantity);\r",
							"    }\r",
							"    pm.expect(subtotal).to.be.equal(totalValue);\r",
							"});\r",
							"pm.test(\"gst field has number value\", () => {\r",
							"    var gst = jsonData.gst;\r",
							"    pm.expect(gst).to.be.a(\"number\").and.match(/[0-9]$/);\r",
							"    var subtotal = ((jsonData.subtotal)*0.05).toFixed(2);\r",
							"    pm.expect(gst).to.equal(parseFloat(subtotal));\r",
							"})\r",
							"pm.test(\"delivery charge field has numeric value\", function () {\r",
							"    var deliveryCharge = jsonData.deliveryCharge;\r",
							"    pm.expect(deliveryCharge).to.be.a(\"number\").and.match(/[0-9]$/);\r",
							"})\r",
							"pm.test(\"disount field has number value\", () => {\r",
							"    var discount = jsonData.discount;\r",
							"    const couponAmount = pm.collectionVariables.get(\"Discount\");\r",
							"    if(couponAmount == 100){\r",
							"        pm.expect(discount).to.be.a(\"number\").and.match(/[0-9]$/).and.equal(100);\r",
							"    }else{\r",
							"        pm.expect(discount).to.be.a(\"number\").and.match(/[0-9]$/).and.equal(0);\r",
							"    }\r",
							"    \r",
							"})\r",
							"pm.test(\"coupon code has null value\", function () {\r",
							"    var coupon = jsonData.couponCode;\r",
							"    const couponAmount = pm.collectionVariables.get(\"Discount\");\r",
							"    if(couponAmount != 100){\r",
							"    pm.expect(coupon).to.be.null;\r",
							"    }else{\r",
							"        pm.expect(coupon).to.be.a(\"string\");\r",
							"    }\r",
							"})\r",
							"pm.test(\"amount payable has number value\", function () {\r",
							"    var amount = jsonData.amountPayable;\r",
							"    pm.expect(amount).to.be.a('number').and.match(/[0-9]$/);\r",
							"    pm.expect(amount).to.equal(Math.round((jsonData.subtotal + jsonData.gst + jsonData.deliveryCharge) - jsonData.discount));\r",
							"})\r",
							"pm.test(\"Payment type field has string value\", function () {\r",
							"    var PaymentType = jsonData.paymentType;\r",
							"    pm.expect(PaymentType).to.be.a(\"string\").and.equal(\"CASH_ON_DELIVERY\");\r",
							"})\r",
							"pm.test(\"canPay field has boolend value and equal to false\", function () {\r",
							"    var canPay = jsonData.canPay;\r",
							"    pm.expect(canPay).to.be.a(\"boolean\");\r",
							"})\r",
							"pm.test(\"payByTime field has null value\", function () {\r",
							"    var payByTime = jsonData.payByTime;\r",
							"    pm.expect(payByTime).to.be.a(\"string\");\r",
							"})\r",
							"pm.test(\"eta field has UTC date\", function () {\r",
							"    var eta = jsonData.eta;\r",
							"    pm.expect(eta).to.be.a(\"string\").and.match(/^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2} UTC$/);\r",
							"})\r",
							"pm.test(\"deliveryDate field has UTC date\", function () {\r",
							"    var deliveryDate = jsonData.deliveryDate;\r",
							"    pm.expect(deliveryDate).to.be.a(\"string\").and.match(/^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2} UTC$/);\r",
							"})\r",
							"pm.test(\"bookingDate field has UTC date\", function () {\r",
							"    var bookingDate = jsonData.bookingDate;\r",
							"    pm.expect(bookingDate).to.be.a(\"string\").and.match(/^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2} UTC$/);\r",
							"})\r",
							"pm.test(\"stationName field has empty value\", function () {\r",
							"    var stationName = jsonData.stationName;\r",
							"    pm.expect(stationName).to.be.a(\"string\");\r",
							"})\r",
							"pm.test(\"stationCode field has empty value\", function () {\r",
							"    var stationCode = jsonData.stationCode;\r",
							"    pm.expect(stationCode).to.be.a(\"string\");\r",
							"})\r",
							"pm.test(\"coach field has string value\", function () {\r",
							"    var coach = jsonData.coach;\r",
							"    pm.expect(coach).to.be.a('string').and.match(/[A-Z0-9]$/);\r",
							"    var coa = pm.collectionVariables.get(\"coach\");\r",
							"    pm.expect(coach).to.equal(coa);\r",
							"})\r",
							"pm.test(\"berth field has string value\", function () {\r",
							"    var berth = jsonData.berth;\r",
							"    pm.expect(berth).to.be.a('string').and.match(/[0-9]$/);\r",
							"    var coa = pm.collectionVariables.get(\"berth\");\r",
							"    pm.expect(berth).to.equal(coa);\r",
							"})\r",
							"pm.test(\"pnr field has number value\", function () {\r",
							"    var pnr = jsonData.pnr;\r",
							"    pm.expect(typeof pnr).to.be.oneOf([\"string\", \"number\"]);\r",
							"    var PNR = pm.collectionVariables.get(\"PNR\")\r",
							"    pm.expect(pnr).to.match(/[0-9]$/).and.to.equal(PNR);\r",
							"})\r",
							"pm.test(\"TrainNo field has number value\", function () {\r",
							"    var TrainNo = jsonData.trainNo;\r",
							"    pm.expect(typeof TrainNo).to.be.oneOf([\"string\", \"number\"]);\r",
							"    var trainNo = pm.collectionVariables.get(\"trainNo\");\r",
							"    pm.expect(TrainNo).to.match(/[0-9]$/).and.equal(trainNo);\r",
							"})\r",
							"pm.test(\"Train name field has string value\", function () {\r",
							"    var trainName = jsonData.trainName;\r",
							"    var TrainName = pm.collectionVariables.get(\"trainName\");\r",
							"    pm.expect(trainName).to.be.a('string').and.match(/[A-Z]$/).and.equal(TrainName);\r",
							"})\r",
							"pm.test(\"orderFrom field has string value\", function () {\r",
							"    var orderFrom = jsonData.orderFrom;\r",
							"    pm.expect(orderFrom).to.be.a(\"string\").and.match(/[A-Za-z]$/);\r",
							"})\r",
							"pm.test(\"orderType field has null value\", function () {\r",
							"    var orderType = jsonData.orderType;\r",
							"    pm.expect(orderType).to.be.a(\"string\").and.match(/[A-Z]$/);\r",
							"})\r",
							"pm.test(\"alternateMobileNumber field has null value\", function () {\r",
							"    var alternateMobileNumber = jsonData.alternateMobileNumber;\r",
							"    pm.expect(alternateMobileNumber).to.be.null;\r",
							"})\r",
							"pm.test(\"comment field has null value\", function () {\r",
							"    var comment = jsonData.comment;\r",
							"    pm.expect(comment).to.be.null;\r",
							"})\r",
							"pm.test(\"deliveryPersonName field has null value\", function () {\r",
							"    var deliveryPersonName = jsonData.deliveryPersonName;\r",
							"    pm.expect(deliveryPersonName).to.be.null;\r",
							"})\r",
							"pm.test(\"deliveryPersonContactNo field has null value\", function () {\r",
							"    var deliveryPersonContactNo = jsonData.deliveryPersonContactNo;\r",
							"    pm.expect(deliveryPersonContactNo).to.be.null;\r",
							"})\r",
							"pm.test(\"status field has string value\", function () {\r",
							"    var status = jsonData.status;\r",
							"    pm.expect(status).to.be.a(\"string\").to.equal(\"ORDER_PLACED\");\r",
							"})\r",
							"pm.test(\"isPrepaidOnly field has null value\", function () {\r",
							"    var isPrepaidOnly = jsonData.isPrepaidOnly;\r",
							"    pm.expect(isPrepaidOnly).to.be.null;\r",
							"})\r",
							"var orderItems = jsonData.orderItems;\r",
							"pm.test(\"orderFrom field had Array value\", function () {\r",
							"    pm.expect(orderItems).to.be.a('array');\r",
							"})\r",
							"for (var j = 0; j < orderItems.length; j++) {\r",
							"    var items = orderItems[j];\r",
							"    pm.test(\"id field has number value\", function () {\r",
							"        var id = items.id;\r",
							"        pm.expect(id).to.be.a(\"number\").to.match(/[0-9]$/);\r",
							"    })\r",
							"    pm.test(\"name field has string value\", function () {\r",
							"        var name = items.name;\r",
							"        pm.expect(name).to.be.a(\"string\").and.length.below(250);\r",
							"    })\r",
							"    pm.test(\"description field has string value\", function () {\r",
							"        var description = items.description;\r",
							"        if(description != null){\r",
							"            pm.expect(description).to.be.a(\"string\").and.length.below(250);\r",
							"        }else{\r",
							"            pm.expect(description).to.be.null;\r",
							"        }\r",
							"    })\r",
							"    pm.test(\"basePrice field has number value\", function () {\r",
							"        var basePrice = items.basePrice;\r",
							"        pm.expect(basePrice).to.be.a(\"number\").and.match(/[0-9]$/);\r",
							"    })\r",
							"    pm.test(\"isVegetarian field has boolean value\", function () {\r",
							"        var isVegetarian = items.isVegetarian;\r",
							"        pm.expect(isVegetarian).to.be.a(\"boolean\");\r",
							"    })\r",
							"    pm.test(\"quantity field has number value\", function () {\r",
							"        var quantity = items.quantity;\r",
							"        pm.expect(quantity).to.be.a(\"number\").match(/[0-9]$/);\r",
							"    })\r",
							"    pm.test(\"customisations field has null value\", function () {\r",
							"        var customisations = items.customisations;\r",
							"        pm.expect(customisations).to.be.null;\r",
							"    })\r",
							"}\r",
							"pm.test(\"undeliveredItems field has array\", function () {\r",
							"    var undeliveredItems = jsonData.undeliveredItems;\r",
							"    pm.expect(undeliveredItems).to.be.a(\"array\");\r",
							"})\r",
							"pm.test(\"orderPayment field has null value\", function () {\r",
							"    var orderPayment = jsonData.orderPayment;\r",
							"    pm.expect(orderPayment).to.be.null;\r",
							"})\r",
							"var customer = jsonData.customer;\r",
							"pm.test(\"customer field has object\", function () {\r",
							"    pm.expect(customer).to.be.an(\"object\");\r",
							"})\r",
							"pm.test(\"id field has number value\", function(){\r",
							"    var id = customer.id;\r",
							"    pm.expect(id).to.be.a(\"number\").and.match(/[0-9]$/);\r",
							"    var customerId = pm.collectionVariables.get(\"CustomerId\");\r",
							"    pm.expect(id).to.equal(customerId);\r",
							"})\r",
							"pm.test(\"name field has string value\", function(){\r",
							"    var name = customer.name;\r",
							"    pm.expect(name).to.be.a(\"string\").to.match(/[A-Za-z]$/);\r",
							"    var Name = pm.collectionVariables.get(\"CustomerName\");\r",
							"    pm.expect(name).to.equal(Name)\r",
							"})\r",
							"pm.test(\"Email field has string value\", function(){\r",
							"    var email = customer.email;\r",
							"    var customerEmail = pm.collectionVariables.get(\"CustomerEmail\");\r",
							"    pm.expect(email).to.be.a(\"string\").and.equal(customerEmail);\r",
							"})\r",
							"pm.test(\"phone field has string value\", function(){\r",
							"    var phone = customer.phone;\r",
							"    pm.expect(typeof phone).to.be.oneOf([\"string\",\"number\"]);\r",
							"    var mobileNumber = pm.collectionVariables.get(\"CustomerPhone\");\r",
							"    pm.expect(phone).to.match(/[0-9]$/).and.to.equal(mobileNumber);\r",
							"})\r",
							"pm.test(\"feedback field has null value\", function(){\r",
							"    var feedback = jsonData.feedback;\r",
							"    pm.expect(feedback).to.be.null;\r",
							"})\r",
							"\r",
							"var statusHistory = jsonData.statusHistory;\r",
							"pm.test(\"status history field has array value\", function(){\r",
							"    pm.expect(statusHistory).to.be.a(\"array\");\r",
							"})\r",
							"for(var z = 0; z < statusHistory.length; z++){\r",
							"    var history = statusHistory[z];\r",
							"    if(history.status == \"ORDER_CONFIRMED\"){\r",
							"        pm.test(\"status field has string value\", function(){\r",
							"            var status = history.status;\r",
							"            pm.expect(status).to.be.a(\"string\").and.equal(\"ORDER_CONFIRMED\");\r",
							"        })\r",
							"        pm.test(\"timestamp field has string value \", function(){\r",
							"            var timestamp = history.timestamp;\r",
							"            pm.expect(timestamp).to.be.a(\"string\").and.to.match(/^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2} UTC$/);\r",
							"        })\r",
							"        pm.test(\"contactNumber field has numeric value\", function(){\r",
							"            var contactNumber = history.contactNumber;\r",
							"            pm.expect(typeof contactNumber).to.be.oneOf([\"string\", \"number\"]);\r",
							"            pm.expect(contactNumber).to.match(/[0-9]$/);\r",
							"        })\r",
							"        pm.test(\"contactType field has string value\", function(){\r",
							"            var contactType = history.contactType;\r",
							"            pm.expect(contactType).to.be.a(\"string\").and.to.match(/[A-Z]$/).and.to.equal(\"OUTLET\");\r",
							"        })\r",
							"\r",
							"    }else if(history.status == \"ORDER_PLACED\"){\r",
							"        pm.test(\"status field has string value\", function(){\r",
							"            var status = history.status;\r",
							"            pm.expect(status).to.be.a(\"string\").and.equal(\"ORDER_PLACED\");\r",
							"        })\r",
							"        pm.test(\"timestamp field has string value \", function(){\r",
							"            var timestamp = history.timestamp;\r",
							"            pm.expect(timestamp).to.be.a(\"string\").and.to.match(/^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2} UTC$/);\r",
							"        })\r",
							"        pm.test(\"contactNumber field has numeric value\", function(){\r",
							"            var contactNumber = history.contactNumber;\r",
							"            pm.expect(contactNumber).to.be.empty;\r",
							"        })\r",
							"        pm.test(\"contactType field has string value\", function(){\r",
							"            var contactType = history.contactType;\r",
							"            pm.expect(contactType).to.be.a(\"string\").and.to.match(/[A-Z]$/).and.to.equal(\"NONE\");\r",
							"        })\r",
							"    }\r",
							"}\r",
							"var outlet = jsonData.outlet;\r",
							"pm.test(\"outlet field has object value\", function(){\r",
							"    pm.expect(outlet).to.be.a(\"object\");\r",
							"})\r",
							"pm.test(\"name field has string value\", function(){\r",
							"    var name = outlet.name;\r",
							"    pm.expect(name).to.be.a(\"string\");\r",
							"})\r",
							"pm.test(\"id field has numeric value\", function(){\r",
							"    var id = outlet.id;\r",
							"    pm.expect(id).to.be.a(\"number\").and.to.match(/[0-9]$/);\r",
							"})\r",
							"pm.test(\"logo field has string or null value\", function(){\r",
							"    var logo = outlet.logo;\r",
							"    pm.expect(typeof logo).to.be.oneOf([\"null\",\"string\"]);\r",
							"})\r",
							"pm.test(\"contactNumber field has numeric value\", function(){\r",
							"    var contactNumber = outlet.contactNumber;\r",
							"    pm.expect(typeof contactNumber).to.be.oneOf([\"number\",\"string\"])\r",
							"    pm.expect(contactNumber).to.match(/[0-9]$/);\r",
							"})\r",
							"pm.test(\"vendorId field has numeric value\", function(){\r",
							"    var vendorId = outlet.vendorId;\r",
							"    var VendorId = pm.collectionVariables.get(\"VendorId\");\r",
							"    pm.expect(vendorId).to.be.a(\"number\").and.match(/[0-9]$/).and.to.equal(VendorId)\r",
							"})\r",
							"pm.test(\"vendorName field has string value\", function(){\r",
							"    var vendorName = outlet.vendorName;\r",
							"    pm.expect(vendorName).to.be.a(\"string\");\r",
							"})\r",
							"pm.test(\"feedbackFromTime field has null value\" , function(){\r",
							"    var feedbackFromTime = jsonData.feedbackFromTime;\r",
							"    pm.expect(typeof feedbackFromTime).to.be.oneOf([\"string\"]);\r",
							"})\r",
							"pm.test(\"feedbackByTime field has null value\" , function(){\r",
							"    var feedbackByTime = jsonData.feedbackByTime;\r",
							"    pm.expect(typeof feedbackByTime).to.be.oneOf([\"string\"]);\r",
							"})\r",
							"pm.test(\"canSendFeedback field has null value\" , function(){\r",
							"    var canSendFeedback = jsonData.canSendFeedback;\r",
							"    pm.expect(canSendFeedback).to.be.false;\r",
							"})\r",
							"pm.test(\"advanceVoucherUrl field has null value\" , function(){\r",
							"    var advanceVoucherUrl = jsonData.advanceVoucherUrl;\r",
							"    pm.expect(advanceVoucherUrl).to.be.null;\r",
							"})\r",
							"pm.test(\"paymentVoucherUrl field has null value\" , function(){\r",
							"    var paymentVoucherUrl = jsonData.paymentVoucherUrl;\r",
							"    pm.expect(paymentVoucherUrl).to.be.null;\r",
							"})\r",
							"pm.test(\"creditVoucherUrl field has null value\" , function(){\r",
							"    var creditVoucherUrl = jsonData.creditVoucherUrl;\r",
							"    pm.expect(creditVoucherUrl).to.be.null;\r",
							"})\r",
							"postman.setNextRequest(\"Get Order\");\r",
							"}else{\r",
							"    postman.setNextRequest(null);\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "38fcaebe-f98b-483c-9170-211f76b775bc",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-auth",
						"value": "{{AUTH}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"berth\": \"{{berth}}\",\r\n    \"coach\": \"{{coach}}\",\r\n    \"trainName\": \"{{trainName}}\",\r\n    \"trainNo\": \"{{trainNo}}\",\r\n    \"pnr\": \"{{PNR}}\",\r\n    \"stationCode\": \"{{StationCode}}\",\r\n    \"stationName\": \"{{StationName}}\",\r\n    \"deliveryDate\": \"{{eta}}\",\r\n    \"outlet\": {\r\n        \"id\": {{OutletId}},\r\n        \"vendor\": {\r\n            \"id\": {{VendorId}}\r\n        }\r\n    },\r\n    \"customer\": {\r\n        \"id\": {{CustomerId}}\r\n    },\r\n    \"orderFrom\": \"{{Device}}\",\r\n    \"orderItems\": [\r\n        {\r\n            \"itemId\": {{Id1}},\r\n            \"id\": {{Id1}},\r\n            \"quantity\": 2\r\n        }\r\n    ],\r\n    \"alternateMobileNumber\": null,\r\n    \"gstin\": null,\r\n    \"comment\": null,\r\n    \"cartId\": null,\r\n    \"couponCode\": {{Discount}},\r\n    \"paymentType\": \"CASH_ON_DELIVERED\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{Base_Url}}/api/v2/order"
			},
			"response": []
		},
		{
			"name": "Get Order",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "96218183-c219-49a2-a1ef-017c1acee4b2",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "c23b56d0-c4a9-4da0-844c-6e26d1cdea10",
						"exec": [
							"const code = pm.response.code;\r",
							"\r",
							"if(code == 200){\r",
							"var moment = require(\"moment\");\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"pm.test(\"Status code name has string ok\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header has value application/json\", function () {\r",
							"    var content = pm.response.headers.get(\"Content-Type\");\r",
							"    pm.expect(content).equal(\"application/json\");\r",
							"});\r",
							"pm.test(\"Status is success\", () => {\r",
							"    pm.expect(pm.response.json().status).equal(\"success\")\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json().result;\r",
							"\r",
							"pm.test(\"result field has object type data\", () => {\r",
							"    pm.expect(jsonData).to.be.a(\"object\");\r",
							"})\r",
							"pm.test(\"id field has numeric type data\", () => {\r",
							"    var id = jsonData.id;\r",
							"    pm.expect(id).to.be.a(\"number\").and.match(/[0-9]$/);\r",
							"    pm.collectionVariables.set(\"orderId\", id);\r",
							"})\r",
							"pm.test(\"invoiceUrl field has null value\", () => {\r",
							"    var invoiceUrl = jsonData.invoiceUrl;\r",
							"    pm.expect(invoiceUrl).to.be.a(\"null\");\r",
							"})\r",
							"pm.test(\"canCancel field has boolean value and should be showing false\", () => {\r",
							"    var canCancel = jsonData.canCancel;\r",
							"    pm.expect(canCancel).to.be.a(\"boolean\");\r",
							"})\r",
							"pm.test(\"otp field has numeric type data\", () => {\r",
							"    var otp = jsonData.otp;\r",
							"    pm.expect(typeof otp).to.be.oneOf([\"string\", \"number\"]);\r",
							"    pm.expect(otp).match(/[0-9]$/);\r",
							"});\r",
							"pm.test(\"subtotal field has numeric type data and value equal to total of all the menu items base price\", () => {\r",
							"    var subtotal = jsonData.subtotal;\r",
							"    pm.expect(subtotal).to.be.a(\"number\").match(/[0-9]$/);\r",
							"    var menuBasePrice = jsonData.orderItems;\r",
							"    var totalValue = 0;\r",
							"    for (var i = 0; i < menuBasePrice.length; i++) {\r",
							"        var baseprice = menuBasePrice[i].basePrice;\r",
							"        var quantity = menuBasePrice[i].quantity\r",
							"        var totalValue = totalValue + (baseprice*quantity);\r",
							"    }\r",
							"    pm.expect(subtotal).to.be.equal(totalValue);\r",
							"});\r",
							"pm.test(\"gst field has number value\", () => {\r",
							"    var gst = jsonData.gst;\r",
							"    pm.expect(gst).to.be.a(\"number\").and.match(/[0-9]$/);\r",
							"    var subtotal = ((jsonData.subtotal)*0.05).toFixed(2);\r",
							"    pm.expect(gst).to.equal(parseFloat(subtotal));\r",
							"})\r",
							"pm.test(\"delivery charge field has numeric value\", function () {\r",
							"    var deliveryCharge = jsonData.deliveryCharge;\r",
							"    pm.expect(deliveryCharge).to.be.a(\"number\").and.match(/[0-9]$/);\r",
							"})\r",
							"pm.test(\"disount field has number value\", () => {\r",
							"    var discount = jsonData.discount;\r",
							"    const couponAmount = pm.collectionVariables.get(\"Discount\");\r",
							"    if(couponAmount == 100){\r",
							"        pm.expect(discount).to.be.a(\"number\").and.match(/[0-9]$/).and.equal(100);\r",
							"    }else{\r",
							"        pm.expect(discount).to.be.a(\"number\").and.match(/[0-9]$/).and.equal(0);\r",
							"    }\r",
							"    \r",
							"})\r",
							"pm.test(\"coupon code has null value\", function () {\r",
							"    var coupon = jsonData.couponCode;\r",
							"    const couponAmount = pm.collectionVariables.get(\"Discount\");\r",
							"    if(couponAmount != 100){\r",
							"    pm.expect(coupon).to.be.null;\r",
							"    }else{\r",
							"        pm.expect(coupon).to.be.a(\"string\");\r",
							"    }\r",
							"})\r",
							"pm.test(\"amount payable has number value\", function () {\r",
							"    var amount = jsonData.amountPayable;\r",
							"    pm.expect(amount).to.be.a('number').and.match(/[0-9]$/);\r",
							"    pm.expect(amount).to.equal(Math.round((jsonData.subtotal + jsonData.gst + jsonData.deliveryCharge) - jsonData.discount));\r",
							"})\r",
							"pm.test(\"Payment type field has string value\", function () {\r",
							"    var PaymentType = jsonData.paymentType;\r",
							"    pm.expect(PaymentType).to.be.a(\"string\").and.equal(\"CASH_ON_DELIVERY\");\r",
							"})\r",
							"pm.test(\"canPay field has boolend value and equal to false\", function () {\r",
							"    var canPay = jsonData.canPay;\r",
							"    pm.expect(canPay).to.be.a(\"boolean\");\r",
							"})\r",
							"pm.test(\"payByTime field has null value\", function () {\r",
							"    var payByTime = jsonData.payByTime;\r",
							"    pm.expect(payByTime).to.be.a(\"string\");\r",
							"})\r",
							"pm.test(\"eta field has UTC date\", function () {\r",
							"    var eta = jsonData.eta;\r",
							"    pm.expect(eta).to.be.a(\"string\").and.match(/^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2} UTC$/);\r",
							"})\r",
							"pm.test(\"deliveryDate field has UTC date\", function () {\r",
							"    var deliveryDate = jsonData.deliveryDate;\r",
							"    pm.expect(deliveryDate).to.be.a(\"string\").and.match(/^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2} UTC$/);\r",
							"})\r",
							"pm.test(\"bookingDate field has UTC date\", function () {\r",
							"    var bookingDate = jsonData.bookingDate;\r",
							"    pm.expect(bookingDate).to.be.a(\"string\").and.match(/^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2} UTC$/);\r",
							"})\r",
							"pm.test(\"stationName field has empty value\", function () {\r",
							"    var stationName = jsonData.stationName;\r",
							"    pm.expect(stationName).to.be.a(\"string\");\r",
							"})\r",
							"pm.test(\"stationCode field has empty value\", function () {\r",
							"    var stationCode = jsonData.stationCode;\r",
							"    pm.expect(stationCode).to.be.a(\"string\");\r",
							"})\r",
							"pm.test(\"coach field has string value\", function () {\r",
							"    var coach = jsonData.coach;\r",
							"    pm.expect(coach).to.be.a('string').and.match(/[A-Z0-9]$/);\r",
							"    var coa = pm.collectionVariables.get(\"coach\");\r",
							"    pm.expect(coach).to.equal(coa);\r",
							"})\r",
							"pm.test(\"berth field has string value\", function () {\r",
							"    var berth = jsonData.berth;\r",
							"    pm.expect(berth).to.be.a('string').and.match(/[0-9]$/);\r",
							"    var coa = pm.collectionVariables.get(\"berth\");\r",
							"    pm.expect(berth).to.equal(coa);\r",
							"})\r",
							"pm.test(\"pnr field has number value\", function () {\r",
							"    var pnr = jsonData.pnr;\r",
							"    pm.expect(typeof pnr).to.be.oneOf([\"string\", \"number\"]);\r",
							"    var PNR = pm.collectionVariables.get(\"PNR\")\r",
							"    pm.expect(pnr).to.match(/[0-9]$/).and.to.equal(PNR);\r",
							"})\r",
							"pm.test(\"TrainNo field has number value\", function () {\r",
							"    var TrainNo = jsonData.trainNo;\r",
							"    pm.expect(typeof TrainNo).to.be.oneOf([\"string\", \"number\"]);\r",
							"    var trainNo = pm.collectionVariables.get(\"trainNo\");\r",
							"    pm.expect(TrainNo).to.match(/[0-9]$/).and.equal(trainNo);\r",
							"})\r",
							"pm.test(\"Train name field has string value\", function () {\r",
							"    var trainName = jsonData.trainName;\r",
							"    var TrainName = pm.collectionVariables.get(\"trainName\");\r",
							"    pm.expect(trainName).to.be.a('string').and.match(/[A-Z]$/).and.equal(TrainName);\r",
							"})\r",
							"pm.test(\"orderFrom field has string value\", function () {\r",
							"    var orderFrom = jsonData.orderFrom;\r",
							"    pm.expect(orderFrom).to.be.a(\"string\").and.match(/[A-Za-z]$/);\r",
							"})\r",
							"pm.test(\"orderType field has null value\", function () {\r",
							"    var orderType = jsonData.orderType;\r",
							"    pm.expect(orderType).to.be.a(\"string\").and.match(/[A-Z]$/);\r",
							"})\r",
							"pm.test(\"alternateMobileNumber field has null value\", function () {\r",
							"    var alternateMobileNumber = jsonData.alternateMobileNumber;\r",
							"    pm.expect(alternateMobileNumber).to.be.null;\r",
							"})\r",
							"pm.test(\"comment field has null value\", function () {\r",
							"    var comment = jsonData.comment;\r",
							"    pm.expect(comment).to.be.null;\r",
							"})\r",
							"pm.test(\"deliveryPersonName field has null value\", function () {\r",
							"    var deliveryPersonName = jsonData.deliveryPersonName;\r",
							"    pm.expect(deliveryPersonName).to.be.null;\r",
							"})\r",
							"pm.test(\"deliveryPersonContactNo field has null value\", function () {\r",
							"    var deliveryPersonContactNo = jsonData.deliveryPersonContactNo;\r",
							"    pm.expect(deliveryPersonContactNo).to.be.null;\r",
							"})\r",
							"pm.test(\"status field has string value\", function () {\r",
							"    var status = jsonData.status;\r",
							"    pm.expect(status).to.be.a(\"string\").to.equal(\"ORDER_PLACED\");\r",
							"})\r",
							"pm.test(\"isPrepaidOnly field has null value\", function () {\r",
							"    var isPrepaidOnly = jsonData.isPrepaidOnly;\r",
							"    pm.expect(isPrepaidOnly).to.be.a(\"boolean\");\r",
							"})\r",
							"var orderItems = jsonData.orderItems;\r",
							"pm.test(\"orderFrom field had Array value\", function () {\r",
							"    pm.expect(orderItems).to.be.a('array');\r",
							"})\r",
							"for (var j = 0; j < orderItems.length; j++) {\r",
							"    var items = orderItems[j];\r",
							"    pm.test(\"id field has number value\", function () {\r",
							"        var id = items.id;\r",
							"        pm.expect(id).to.be.a(\"number\").to.match(/[0-9]$/);\r",
							"    })\r",
							"    pm.test(\"name field has string value\", function () {\r",
							"        var name = items.name;\r",
							"        pm.expect(name).to.be.a(\"string\").and.length.below(250);\r",
							"    })\r",
							"    pm.test(\"description field has string value\", function () {\r",
							"        var description = items.description;\r",
							"        if(description != null){\r",
							"        pm.expect(description).to.be.a(\"string\").and.length.below(250);\r",
							"        }else{\r",
							"            pm.expect(description).to.be.null;\r",
							"        }\r",
							"    })\r",
							"    pm.test(\"basePrice field has number value\", function () {\r",
							"        var basePrice = items.basePrice;\r",
							"        pm.expect(basePrice).to.be.a(\"number\").and.match(/[0-9]$/);\r",
							"    })\r",
							"    pm.test(\"isVegetarian field has boolean value\", function () {\r",
							"        var isVegetarian = items.isVegetarian;\r",
							"        pm.expect(isVegetarian).to.be.a(\"boolean\");\r",
							"    })\r",
							"    pm.test(\"quantity field has number value\", function () {\r",
							"        var quantity = items.quantity;\r",
							"        pm.expect(quantity).to.be.a(\"number\").match(/[0-9]$/);\r",
							"    })\r",
							"    pm.test(\"customisations field has null value\", function () {\r",
							"        var customisations = items.customisations;\r",
							"        pm.expect(customisations).to.be.null;\r",
							"    })\r",
							"}\r",
							"pm.test(\"undeliveredItems field has array\", function () {\r",
							"    var undeliveredItems = jsonData.undeliveredItems;\r",
							"    pm.expect(undeliveredItems).to.be.a(\"array\");\r",
							"})\r",
							"pm.test(\"orderPayment field has null value\", function () {\r",
							"    var orderPayment = jsonData.orderPayment;\r",
							"    pm.expect(orderPayment).to.be.null;\r",
							"})\r",
							"var customer = jsonData.customer;\r",
							"pm.test(\"customer field has object\", function () {\r",
							"    pm.expect(customer).to.be.an(\"object\");\r",
							"})\r",
							"pm.test(\"id field has number value\", function(){\r",
							"    var id = customer.id;\r",
							"    pm.expect(id).to.be.a(\"number\").and.match(/[0-9]$/);\r",
							"    var customerId = pm.collectionVariables.get(\"CustomerId\");\r",
							"    pm.expect(id).to.equal(customerId);\r",
							"})\r",
							"pm.test(\"name field has string value\", function(){\r",
							"    var name = customer.name;\r",
							"    pm.expect(name).to.be.a(\"string\").to.match(/[A-Za-z]$/);\r",
							"    var Name = pm.collectionVariables.get(\"CustomerName\");\r",
							"    pm.expect(name).to.equal(Name)\r",
							"})\r",
							"pm.test(\"Email field has string value\", function(){\r",
							"    var email = customer.email;\r",
							"    var customerEmail = pm.collectionVariables.get(\"CustomerEmail\");\r",
							"    pm.expect(email).to.be.a(\"string\").and.equal(customerEmail);\r",
							"})\r",
							"pm.test(\"phone field has string value\", function(){\r",
							"    var phone = customer.phone;\r",
							"    pm.expect(typeof phone).to.be.oneOf([\"string\",\"number\"]);\r",
							"    var mobileNumber = pm.collectionVariables.get(\"CustomerPhone\");\r",
							"    pm.expect(phone).to.match(/[0-9]$/).and.to.equal(mobileNumber);\r",
							"})\r",
							"pm.test(\"feedback field has null value\", function(){\r",
							"    var feedback = jsonData.feedback;\r",
							"    pm.expect(feedback).to.be.null;\r",
							"})\r",
							"\r",
							"var statusHistory = jsonData.statusHistory;\r",
							"pm.test(\"status history field has array value\", function(){\r",
							"    pm.expect(statusHistory).to.be.a(\"array\");\r",
							"})\r",
							"for(var z = 0; z < statusHistory.length; z++){\r",
							"    var history = statusHistory[z];\r",
							"    if(history.status == \"ORDER_CONFIRMED\"){\r",
							"        pm.test(\"status field has string value\", function(){\r",
							"            var status = history.status;\r",
							"            pm.expect(status).to.be.a(\"string\").and.equal(\"ORDER_CONFIRMED\");\r",
							"        })\r",
							"        pm.test(\"timestamp field has string value \", function(){\r",
							"            var timestamp = history.timestamp;\r",
							"            pm.expect(timestamp).to.be.a(\"string\").and.to.match(/^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2} UTC$/);\r",
							"        })\r",
							"        pm.test(\"contactNumber field has numeric value\", function(){\r",
							"            var contactNumber = history.contactNumber;\r",
							"            pm.expect(typeof contactNumber).to.be.oneOf([\"string\", \"number\"]);\r",
							"            pm.expect(contactNumber).to.match(/[0-9]$/);\r",
							"        })\r",
							"        pm.test(\"contactType field has string value\", function(){\r",
							"            var contactType = history.contactType;\r",
							"            pm.expect(contactType).to.be.a(\"string\").and.to.match(/[A-Z]$/).and.to.oneOf([\"OUTLET\",\"NONE\"]);\r",
							"        })\r",
							"\r",
							"    }else if(history.status == \"ORDER_PLACED\"){\r",
							"        pm.test(\"status field has string value\", function(){\r",
							"            var status = history.status;\r",
							"            pm.expect(status).to.be.a(\"string\").and.equal(\"ORDER_PLACED\");\r",
							"        })\r",
							"        pm.test(\"timestamp field has string value \", function(){\r",
							"            var timestamp = history.timestamp;\r",
							"            if(timestamp != null){\r",
							"                pm.expect(timestamp).to.be.a(\"string\").and.to.match(/^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2} UTC$/);\r",
							"            }else{\r",
							"                pm.expect(timestamp).to.be.null;\r",
							"            }\r",
							"            \r",
							"        })\r",
							"        pm.test(\"contactNumber field has numeric value\", function(){\r",
							"            var contactNumber = history.contactNumber;\r",
							"            if(contactNumber != null){\r",
							"                pm.expect(contactNumber).to.match(/[0-9]$/);\r",
							"            }else{\r",
							"                pm.expect(contactNumber).to.be.null;\r",
							"            }\r",
							"        })\r",
							"        pm.test(\"contactType field has string value\", function(){\r",
							"            var contactType = history.contactType;\r",
							"            pm.expect(contactType).to.be.a(\"string\").and.to.match(/[A-Z]$/).and.to.equal(\"NONE\");\r",
							"        })\r",
							"    }\r",
							"}\r",
							"var outlet = jsonData.outlet;\r",
							"pm.test(\"outlet field has object value\", function(){\r",
							"    pm.expect(outlet).to.be.a(\"object\");\r",
							"})\r",
							"pm.test(\"name field has string value\", function(){\r",
							"    var name = outlet.name;\r",
							"    pm.expect(name).to.be.a(\"string\");\r",
							"})\r",
							"pm.test(\"id field has numeric value\", function(){\r",
							"    var id = outlet.id;\r",
							"    pm.expect(id).to.be.a(\"number\").and.to.match(/[0-9]$/);\r",
							"})\r",
							"pm.test(\"logo field has string or null value\", function(){\r",
							"    var logo = outlet.logo;\r",
							"    pm.expect(typeof logo).to.be.oneOf([\"null\",\"string\"]);\r",
							"})\r",
							"pm.test(\"contactNumber field has numeric value\", function(){\r",
							"    var contactNumber = outlet.contactNumber;\r",
							"    pm.expect(typeof contactNumber).to.be.oneOf([\"number\",\"string\"])\r",
							"    pm.expect(contactNumber).to.match(/[0-9]$/);\r",
							"})\r",
							"pm.test(\"vendorId field has numeric value\", function(){\r",
							"    var vendorId = outlet.vendorId;\r",
							"    var VendorId = pm.collectionVariables.get(\"VendorId\");\r",
							"    pm.expect(vendorId).to.be.a(\"number\").and.match(/[0-9]$/).and.to.equal(VendorId)\r",
							"})\r",
							"pm.test(\"vendorName field has string value\", function(){\r",
							"    var vendorName = outlet.vendorName;\r",
							"    pm.expect(vendorName).to.be.a(\"string\");\r",
							"})\r",
							"pm.test(\"feedbackFromTime field has null value\" , function(){\r",
							"    var feedbackFromTime = jsonData.feedbackFromTime;\r",
							"    pm.expect(typeof feedbackFromTime).to.be.oneOf([\"string\"]);\r",
							"})\r",
							"pm.test(\"feedbackByTime field has null value\" , function(){\r",
							"    var feedbackByTime = jsonData.feedbackByTime;\r",
							"    pm.expect(typeof feedbackByTime).to.be.oneOf([\"string\"]);\r",
							"})\r",
							"pm.test(\"canSendFeedback field has null value\" , function(){\r",
							"    var canSendFeedback = jsonData.canSendFeedback;\r",
							"    pm.expect(canSendFeedback).to.be.false;\r",
							"})\r",
							"pm.test(\"advanceVoucherUrl field has null value\" , function(){\r",
							"    var advanceVoucherUrl = jsonData.advanceVoucherUrl;\r",
							"    pm.expect(advanceVoucherUrl).to.be.null;\r",
							"})\r",
							"pm.test(\"paymentVoucherUrl field has null value\" , function(){\r",
							"    var paymentVoucherUrl = jsonData.paymentVoucherUrl;\r",
							"    pm.expect(paymentVoucherUrl).to.be.null;\r",
							"})\r",
							"pm.test(\"creditVoucherUrl field has null value\" , function(){\r",
							"    var creditVoucherUrl = jsonData.creditVoucherUrl;\r",
							"    pm.expect(creditVoucherUrl).to.be.null;\r",
							"})\r",
							"postman.setNextRequest(\"Order List\");\r",
							"}else{\r",
							"    postman.setNextRequest(null);\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "383dce7c-4862-412b-a0d0-8b8ab0c167d9",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-auth",
						"value": "{{AUTH}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{Base_Url}}/api/v2/order/:orderId",
					"host": [
						"{{Base_Url}}"
					],
					"path": [
						"api",
						"v2",
						"order",
						":orderId"
					],
					"variable": [
						{
							"id": "dac8e46f-a361-47e8-80b9-fa8e2551162e",
							"key": "orderId",
							"value": "{{orderId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Order List",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "3aaf88ee-c9e7-459a-9dab-984fc65b7190",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "8cda5d43-fc46-4219-a0f7-c0c7225461cb",
						"exec": [
							"const code = pm.response.code;\r",
							"const jsonData = pm.response.json().result;\r",
							"if(code == 200){\r",
							"    const orderId = pm.collectionVariables.get(\"orderId\");\r",
							"\r",
							"    const orderDetails = jsonData.orderList.find((id) => {\r",
							"        return id.orderId == orderId;\r",
							"    });\r",
							"    if(orderDetails != undefined || orderDetails != null){\r",
							"        pm.test(\"order Id are found in the list\", () => {\r",
							"            pm.expect(orderDetails.orderId).to.be.equal(orderId);\r",
							"        });\r",
							"        pm.test(\"Status code name has string OK\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header has value application/json\", function () {\r",
							"    var content = pm.response.headers.get(\"Content-Type\");\r",
							"    pm.expect(content).equal(\"application/json\");\r",
							"});\r",
							"pm.test(\"Status is success\", () => {\r",
							"    pm.expect(pm.response.json().status).equal(\"success\")\r",
							"});\r",
							"\r",
							"pm.test(\"orde count field has numeric format\", function(){\r",
							"    var orderCount = jsonData.totalCount;\r",
							"    pm.expect(orderCount).to.be.a(\"number\").and.to.match(/[0-9]$/);\r",
							"})\r",
							"pm.test(\"orderList field has array value\", function(){\r",
							"    var orderList = jsonData.orderList;\r",
							"    pm.expect(orderList).to.be.a(\"array\");\r",
							"});\r",
							"pm.test(\"order Number field has numeric value\", function(){\r",
							"            var orderNumber = orderDetails.orderNumber;\r",
							"            pm.expect(orderNumber).to.be.a(\"number\").and.match(/[0-9]$/);\r",
							"        })\r",
							"        pm.test(\"orderId field has numeric value\", function(){\r",
							"            var orderId = orderDetails.orderId;\r",
							"            pm.expect(orderId).to.be.a(\"number\").and.match(/[0-9]$/);\r",
							"        })\r",
							"        pm.test(\"vendorName field has String type value\", function(){\r",
							"            var vendorName = orderDetails.vendorName;\r",
							"            pm.expect(vendorName).to.be.a(\"string\");\r",
							"        })\r",
							"        pm.test(\"vendorType field has String type value\", function(){\r",
							"            var vendorType = orderDetails.vendorType;\r",
							"            pm.expect(vendorType).to.be.a(\"string\").and.equal(\"OFFLINE\").and.match(/[A-Z]$/);\r",
							"        })\r",
							"        pm.test(\"outletName field has String type value\", function(){\r",
							"            var outletName = orderDetails.outletName;\r",
							"            pm.expect(outletName).to.be.a(\"string\");\r",
							"        })\r",
							"        pm.test(\"outletRelationshipManagerPhone field has numeric type value\", function(){\r",
							"            var outletRelationshipManagerPhone = orderDetails.outletRelationshipManagerPhone;\r",
							"            pm.expect(typeof outletRelationshipManagerPhone).to.be.oneOf([\"string\",\"number\"])\r",
							"            pm.expect(outletRelationshipManagerPhone).match(/[0-9]$/);\r",
							"        })\r",
							"        pm.test(\"outletEmail field has String type value\", function(){\r",
							"            var outletEmail = orderDetails.outletEmail;\r",
							"                pm.expect(typeof outletEmail).to.be.oneOf([\"string\",\"null\"]);\r",
							"        });\r",
							"        pm.test(\"bookingDate field has String type value\", function(){\r",
							"            var bookingDate = orderDetails.bookingDate;\r",
							"            pm.expect(bookingDate).to.be.a(\"string\").and.match(/^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2} UTC$/);\r",
							"        });\r",
							"        pm.test(\"deliveryDate field has String type value\", function(){\r",
							"            var deliveryDate = orderDetails.deliveryDate;\r",
							"            pm.expect(deliveryDate).to.be.a(\"string\").and.match(/^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2} UTC$/);\r",
							"        });\r",
							"        pm.test(\"orderType field has Normal & Pantry type value\", function(){\r",
							"            var orderType = orderDetails.orderType;\r",
							"            pm.expect(orderType).to.be.a(\"string\").and.equal(\"NORMAL\");\r",
							"        });\r",
							"        pm.test(\"stationCode field has null value for pantry order\", function(){\r",
							"            var stationCode = orderDetails.stationCode;\r",
							"                pm.expect(stationCode).to.be.a(\"string\").and.match(/[A-Z]$/);\r",
							"        });\r",
							"        pm.test(\"paymentType field has COD value for pantry order\", function(){\r",
							"            var paymentType = orderDetails.paymentType;\r",
							"            var orderType = orderDetails.orderType;\r",
							"                pm.expect(paymentType).to.a(\"string\").and.equal(\"CASH_ON_DELIVERY\").and.match(/[A-Z]$/);\r",
							"        });\r",
							"        pm.test(\"status field has string type data\", function(){\r",
							"            var status = orderDetails.status;\r",
							"            pm.expect(status).to.be.a(\"string\").and.to.be.oneOf([\"ORDER_PLACED\",\"ORDER_DELIVERED\",\"ORDER_CANCELLED\",\"ORDER_UNDELIVERED\",\"ORDER_PENDING\"]);\r",
							"        });\r",
							"        pm.test(\"amountPayable field has numeric type value\", function(){\r",
							"            var amountPayable = orderDetails.amountPayable;\r",
							"            pm.expect(amountPayable).to.be.a(\"number\").and.match(/[0-9]$/);\r",
							"        });\r",
							"        pm.test(\"pnr field has numeric type value\", function(){\r",
							"            var pnr = orderDetails.pnr;\r",
							"            pm.expect(typeof pnr).to.be.oneOf([\"number\",\"string\"]);\r",
							"            pm.expect(pnr).to.match(/[0-9]$/);\r",
							"            pm.expect(pnr.length).to.be.equal(10);\r",
							"        });\r",
							"        pm.test(\"coach field has string type value\", function(){\r",
							"            var coach = orderDetails.coach;\r",
							"            pm.expect(coach).to.be.a(\"string\").and.match(/[A-Z0-9a-z]$/);\r",
							"        });\r",
							"        pm.test(\"berth field has numeric type value\", function(){\r",
							"            var berth = orderDetails.berth;\r",
							"            pm.expect(typeof berth).to.be.oneOf([\"number\",\"string\"])\r",
							"            pm.expect(berth).match(/[0-9]$/);\r",
							"        });\r",
							"        pm.test(\"trainNo field has numeric type value\", function(){\r",
							"            var trainNo = orderDetails.trainNo;\r",
							"            pm.expect(typeof trainNo).to.be.oneOf([\"number\",\"string\"])\r",
							"            pm.expect(trainNo).match(/[0-9]$/);\r",
							"        });\r",
							"        pm.test(\"customerMobile field has numeric type value\", function(){\r",
							"            var customerMobile = orderDetails.customerMobile;\r",
							"            pm.expect(typeof customerMobile).to.be.oneOf([\"number\",\"string\"])\r",
							"            pm.expect(customerMobile).match(/[0-9]$/);\r",
							"        });\r",
							"        pm.test(\"bookedBy field has string type value\", function(){\r",
							"            var bookedBy = orderDetails.bookedBy;\r",
							"            pm.expect(bookedBy).to.be.a(\"string\").and.match(/[a-zA-Z]$/);\r",
							"        });\r",
							"        pm.test(\"outletId field has numeric type value\", function(){\r",
							"            var outletId = orderDetails.outletId;\r",
							"            pm.expect(outletId).to.be.a(\"number\").and.match(/[0-9]$/);\r",
							"        });\r",
							"        pm.test(\"customerName field has string type value\", function(){\r",
							"            var customerName = orderDetails.customerName;\r",
							"            pm.expect(customerName).to.be.a(\"string\").and.match(/[A-Za-z]$/);\r",
							"        });\r",
							"        pm.test(\"trainName field has string type value\", function(){\r",
							"            var trainName = orderDetails.trainName;\r",
							"            pm.expect(trainName).to.be.a(\"string\").and.match(/[A-Za-z]$/);\r",
							"        });\r",
							"        pm.test(\"remarks field has string type value\", function(){\r",
							"            var remarks = orderDetails.remarks;\r",
							"            pm.expect(remarks).to.be.a(\"string\");\r",
							"        });\r",
							"        pm.test(\"updatedAt field has String type value\", function(){\r",
							"            var updatedAt = orderDetails.updatedAt;\r",
							"            pm.expect(updatedAt).to.be.a(\"string\").and.match(/^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2} UTC$/);\r",
							"        });\r",
							"        pm.test(\"updatedBy field has string or null value\", function(){\r",
							"            var updatedBy = orderDetails.updatedBy;\r",
							"            pm.expect(typeof updatedBy).to.be.oneOf([\"string\",\"null\",\"object\"]);\r",
							"        });\r",
							"        pm.test(\"eta field has String type value\", function(){\r",
							"            var eta = orderDetails.updatedAt;\r",
							"            pm.expect(eta).to.be.a(\"string\").and.match(/^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2} UTC$/);\r",
							"        });\r",
							"        pm.test(\"vendorRelationshipManagerPhone field has numeric type value\", function(){\r",
							"            var vendorRelationshipManagerPhone = orderDetails.vendorRelationshipManagerPhone;\r",
							"            pm.expect(typeof vendorRelationshipManagerPhone).to.be.oneOf([\"string\",\"number\"])\r",
							"            pm.expect(vendorRelationshipManagerPhone).match(/[0-9]$/);\r",
							"        });\r",
							"        pm.test(\"outletContactNumber field has numeric type value\", function(){\r",
							"            var outletContactNumber = orderDetails.outletContactNumber;\r",
							"            var vendorType = orderDetails.vendorType;\r",
							"            if(vendorType == \"OFFLINE\"){\r",
							"                pm.expect(typeof outletContactNumber).to.be.oneOf([\"string\",\"number\",\"object\"]);\r",
							"                pm.expect(outletContactNumber).match(/[0-9]$/);\r",
							"            }else{\r",
							"                pm.expect(typeof outletContactNumber).to.be.oneOf([\"null\",\"string\",\"object\"]);\r",
							"            }\r",
							"        });\r",
							"        pm.test(\"canPay field has boolean value\", function(){\r",
							"            var canPay = orderDetails.canPay;\r",
							"                pm.expect(canPay).to.be.a(\"boolean\");\r",
							"        });\r",
							"        pm.test(\"otp field has number value\", function(){\r",
							"            var otp = orderDetails.otp;\r",
							"                pm.expect(typeof otp).to.be.oneOf([\"string\",\"number\"]);\r",
							"                pm.expect(otp).to.match(/[0-9]$/);\r",
							"        });\r",
							"        pm.test(\"logoUrl field has string type value\", function(){\r",
							"            var logoUrl = orderDetails.logoUrl;\r",
							"            pm.expect(logoUrl).to.be.a(\"string\");\r",
							"        });\r",
							"        pm.test(\"orderFrom field has string type value\", function(){\r",
							"            var orderFrom = orderDetails.orderFrom;\r",
							"            pm.expect(orderFrom).to.be.a(\"string\");\r",
							"        });\r",
							"        pm.test(\"cutOff field has string type value\", function(){\r",
							"            var cutOff = orderDetails.cutOff;\r",
							"            pm.expect(cutOff).to.be.a(\"number\").and.match(/[0-9]$/).and.greaterThan(14).and.lessThan(106);\r",
							"        });\r",
							"        pm.test(\"createdBy field has string type value\", function(){\r",
							"            var createdBy = orderDetails.createdBy;\r",
							"            pm.expect(createdBy).to.be.a(\"string\");\r",
							"        });\r",
							"        pm.test(\"paymentStatus field has string type value\", function(){\r",
							"            var paymentStatus = orderDetails.paymentStatus;\r",
							"                pm.expect(typeof paymentStatus).to.be.oneOf([\"string\",\"null\",\"object\"]);\r",
							"        });\r",
							"        pm.test(\"stationName field has string type value\", function(){\r",
							"            var stationName = orderDetails.stationName;\r",
							"                pm.expect(stationName).to.be.a(\"string\").and.match(/[A-Za-z]$/);\r",
							"        });\r",
							"        pm.test(\"customerEmail field has string type value\", function(){\r",
							"            var customerEmail = orderDetails.customerEmail;\r",
							"            pm.expect(customerEmail).to.be.a(\"string\");\r",
							"        });\r",
							"\r",
							"    }else{\r",
							"        pm.test(\"order id is not found in the list\", () => {\r",
							"            pm.expect(true).to.be.false;\r",
							"        })\r",
							"    }\r",
							"}\r",
							"\r",
							"        "
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "f73431f0-910e-41d4-9daf-5944ee70bcee",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-auth",
						"value": "{{AUTH}}",
						"type": "text"
					}
				],
				"url": "{{Base_Url}}/api/v2/order/list"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "9bbb1393-8928-48aa-b9f7-e1045eb3880d",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "3b77634c-04be-4df3-a4c7-7c61e1e9cdfd",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "7555db04-f857-4cf0-9013-88f501e3e93e",
			"key": "nextStation",
			"value": ""
		},
		{
			"id": "3b027df9-4936-48c7-a18e-1dd6a6bf7794",
			"key": "station",
			"value": ""
		},
		{
			"id": "9003d18a-faf2-4d07-af08-36c9d2709210",
			"key": "pnr",
			"value": ""
		}
	]
}